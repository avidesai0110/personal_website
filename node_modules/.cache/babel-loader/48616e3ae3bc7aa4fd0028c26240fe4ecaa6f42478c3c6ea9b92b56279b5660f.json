{"ast":null,"code":"// Shapes.js\nimport * as THREE from 'three';\n\n// Function to create a rounded star shape\nexport const createRoundedStar = (outerRadius, innerRadius, points, depth, smoothness) => {\n  const starShape = new THREE.Shape();\n  const step = Math.PI / points;\n  for (let i = 0; i < 2 * points; i++) {\n    const radius = i % 2 === 0 ? outerRadius : innerRadius;\n    const angle = i * step;\n    const x = Math.cos(angle) * radius;\n    const y = Math.sin(angle) * radius;\n    if (i === 0) {\n      starShape.moveTo(x, y);\n    } else {\n      starShape.lineTo(x, y);\n    }\n  }\n  starShape.closePath();\n  const extrudeSettings = {\n    depth: depth,\n    bevelEnabled: true,\n    bevelThickness: smoothness,\n    bevelSize: smoothness,\n    bevelSegments: 10\n  };\n  return new THREE.ExtrudeGeometry(starShape, extrudeSettings);\n};\n\n// Custom Rounded Box Geometry for consistent size across shapes\nexport const createRoundedBox = (width, height, depth, radius, smoothness) => {\n  const shape = new THREE.Shape();\n  const halfWidth = width / 2 - radius;\n  const halfHeight = height / 2 - radius;\n  shape.moveTo(-halfWidth, halfHeight);\n  shape.lineTo(halfWidth, halfHeight);\n  shape.quadraticCurveTo(width / 2, halfHeight, width / 2, halfHeight - radius);\n  shape.lineTo(width / 2, -halfHeight);\n  shape.quadraticCurveTo(width / 2, -height / 2, halfWidth, -height / 2);\n  shape.lineTo(-halfWidth, -height / 2);\n  shape.quadraticCurveTo(-width / 2, -height / 2, -width / 2, -halfHeight);\n  shape.lineTo(-width / 2, halfHeight - radius);\n  shape.quadraticCurveTo(-width / 2, halfHeight, -halfWidth, halfHeight);\n  const extrudeSettings = {\n    depth: depth,\n    bevelEnabled: true,\n    bevelSegments: smoothness,\n    steps: 2,\n    bevelSize: radius,\n    bevelThickness: radius\n  };\n  return new THREE.ExtrudeGeometry(shape, extrudeSettings);\n};\n\n// Export geometries\nexport const geometries = [new THREE.SphereGeometry(45, 32, 32),\n// Sphere\nnew THREE.CylinderGeometry(40, 40, 80, 32),\n// Cylinder replacing the cone\nnew THREE.TorusGeometry(35, 15, 16, 100),\n// Torus\ncreateRoundedBox(70, 70, 70, 8, 16),\n// Rounded Box\nnew THREE.TorusKnotGeometry(30, 10, 100, 16),\n// Torus Knot for a unique twist\ncreateRoundedStar(60, 30, 5, 40, 3) // Custom Rounded Star\n];\n\n// Export colors\nexport const colors = [0xffa500,\n// Orange\n0xbb66ff,\n// Purple\n0x6699ff,\n// Light Blue\n0x87cefa,\n// Sky Blue\n0x90ee90,\n// Light Green\n0xffff66 // Yellow\n];","map":{"version":3,"names":["THREE","createRoundedStar","outerRadius","innerRadius","points","depth","smoothness","starShape","Shape","step","Math","PI","i","radius","angle","x","cos","y","sin","moveTo","lineTo","closePath","extrudeSettings","bevelEnabled","bevelThickness","bevelSize","bevelSegments","ExtrudeGeometry","createRoundedBox","width","height","shape","halfWidth","halfHeight","quadraticCurveTo","steps","geometries","SphereGeometry","CylinderGeometry","TorusGeometry","TorusKnotGeometry","colors"],"sources":["/Users/avi/Desktop/mywebsite/personalwebsite/personal-website/src/Shapes.js"],"sourcesContent":["// Shapes.js\nimport * as THREE from 'three';\n\n// Function to create a rounded star shape\nexport const createRoundedStar = (outerRadius, innerRadius, points, depth, smoothness) => {\n  const starShape = new THREE.Shape();\n  const step = Math.PI / points;\n  for (let i = 0; i < 2 * points; i++) {\n    const radius = i % 2 === 0 ? outerRadius : innerRadius;\n    const angle = i * step;\n    const x = Math.cos(angle) * radius;\n    const y = Math.sin(angle) * radius;\n    if (i === 0) {\n      starShape.moveTo(x, y);\n    } else {\n      starShape.lineTo(x, y);\n    }\n  }\n  starShape.closePath();\n\n  const extrudeSettings = {\n    depth: depth,\n    bevelEnabled: true,\n    bevelThickness: smoothness,\n    bevelSize: smoothness,\n    bevelSegments: 10,\n  };\n\n  return new THREE.ExtrudeGeometry(starShape, extrudeSettings);\n};\n\n// Custom Rounded Box Geometry for consistent size across shapes\nexport const createRoundedBox = (width, height, depth, radius, smoothness) => {\n  const shape = new THREE.Shape();\n  const halfWidth = width / 2 - radius;\n  const halfHeight = height / 2 - radius;\n\n  shape.moveTo(-halfWidth, halfHeight);\n  shape.lineTo(halfWidth, halfHeight);\n  shape.quadraticCurveTo(width / 2, halfHeight, width / 2, halfHeight - radius);\n  shape.lineTo(width / 2, -halfHeight);\n  shape.quadraticCurveTo(width / 2, -height / 2, halfWidth, -height / 2);\n  shape.lineTo(-halfWidth, -height / 2);\n  shape.quadraticCurveTo(-width / 2, -height / 2, -width / 2, -halfHeight);\n  shape.lineTo(-width / 2, halfHeight - radius);\n  shape.quadraticCurveTo(-width / 2, halfHeight, -halfWidth, halfHeight);\n\n  const extrudeSettings = {\n    depth: depth,\n    bevelEnabled: true,\n    bevelSegments: smoothness,\n    steps: 2,\n    bevelSize: radius,\n    bevelThickness: radius,\n  };\n\n  return new THREE.ExtrudeGeometry(shape, extrudeSettings);\n};\n\n// Export geometries\nexport const geometries = [\n  new THREE.SphereGeometry(45, 32, 32),          // Sphere\n  new THREE.CylinderGeometry(40, 40, 80, 32),    // Cylinder replacing the cone\n  new THREE.TorusGeometry(35, 15, 16, 100),      // Torus\n  createRoundedBox(70, 70, 70, 8, 16),           // Rounded Box\n  new THREE.TorusKnotGeometry(30, 10, 100, 16),  // Torus Knot for a unique twist\n  createRoundedStar(60, 30, 5, 40, 3),           // Custom Rounded Star\n];\n\n// Export colors\nexport const colors = [\n  0xffa500,   // Orange\n  0xbb66ff,   // Purple\n  0x6699ff,   // Light Blue\n  0x87cefa,   // Sky Blue\n  0x90ee90,   // Light Green\n  0xffff66,   // Yellow\n];\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}