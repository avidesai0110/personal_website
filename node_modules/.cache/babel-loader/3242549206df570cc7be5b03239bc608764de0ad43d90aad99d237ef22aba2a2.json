{"ast":null,"code":"var _jsxFileName = \"/Users/avi/Desktop/mywebsite/personal-website/src/components/Particles.js\",\n  _s = $RefreshSig$();\n// src/components/Particles.js\nimport React, { useEffect, useRef } from 'react';\nimport './Particles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Particles = () => {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n    const particlesArray = [];\n    const mouse = {\n      x: null,\n      y: null\n    };\n\n    // Mouse Event Listener\n    window.addEventListener('mousemove', event => {\n      mouse.x = event.x;\n      mouse.y = event.y;\n    });\n    class Particle {\n      constructor(x, y, layer) {\n        this.x = x;\n        this.y = y;\n        this.layer = layer; // Assign each particle a specific layer (0-4)\n        this.size = Math.random() * 30 + 10; // Size between 10 and 40 for variety\n        this.baseSize = this.size; // Base size to help with pulsing\n        this.orbitRadius = Math.random() * 100 + 50; // Random orbit radius between 50 and 150\n        this.angle = Math.random() * Math.PI * 2; // Random initial angle for orbit\n        this.velocityX = Math.random() * 2 - 1; // Random X velocity for unpredictable motion\n        this.velocityY = Math.random() * 2 - 1; // Random Y velocity for unpredictable motion\n        this.color = `hsl(${Math.random() * 360}, 100%, 60%)`; // Brighter colors for vivid effect\n        this.pulseSpeed = Math.random() * 0.05 + 0.02; // Speed of pulsing effect\n        this.life = Math.random() * 300 + 100; // Lifespan of each particle\n      }\n      draw() {\n        // Create a radial gradient to simulate a 3D effect\n        const gradient = context.createRadialGradient(this.x - this.size / 4, this.y - this.size / 4, this.size / 5, this.x, this.y, this.size);\n        gradient.addColorStop(0, 'white');\n        gradient.addColorStop(0.3, this.color);\n        gradient.addColorStop(1, 'black');\n        context.beginPath();\n        context.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n        context.fillStyle = gradient;\n        context.fill();\n        context.closePath();\n      }\n      update() {\n        // Pulsing effect to make particles \"breathe\"\n        this.size = this.baseSize + Math.sin(Date.now() * this.pulseSpeed) * 5;\n\n        // If the mouse is present, make particles orbit around it\n        if (mouse.x !== null && mouse.y !== null) {\n          this.angle += 0.02; // Constantly change angle to simulate orbit\n\n          const targetX = mouse.x + Math.cos(this.angle) * this.orbitRadius;\n          const targetY = mouse.y + Math.sin(this.angle) * this.orbitRadius;\n          const force = 0.05; // Attraction force\n          const accelX = (targetX - this.x) * force;\n          const accelY = (targetY - this.y) * force;\n          this.velocityX += accelX;\n          this.velocityY += accelY;\n\n          // Apply velocity\n          this.x += this.velocityX;\n          this.y += this.velocityY;\n        }\n\n        // Slow down slightly to give smooth flowing effect\n        this.velocityX *= 0.96;\n        this.velocityY *= 0.96;\n\n        // Update position with unpredictable floating movement\n        this.x += Math.cos(this.angle) * 0.5;\n        this.y += Math.sin(this.angle) * 0.5;\n\n        // Ensure particles stay within canvas bounds or fly off\n        if (this.x - this.size > canvas.width || this.x + this.size < 0 || this.y - this.size > canvas.height || this.y + this.size < 0) {\n          this.respawn(); // Respawn particle if it leaves the canvas\n        }\n\n        // Reduce life and respawn if expired\n        this.life--;\n        if (this.life <= 0) {\n          this.respawn();\n        }\n        this.draw();\n      }\n      respawn() {\n        this.x = Math.random() * canvas.width;\n        this.y = Math.random() * canvas.height;\n        this.size = Math.random() * 30 + 10;\n        this.baseSize = this.size;\n        this.orbitRadius = Math.random() * 100 + 50;\n        this.angle = Math.random() * Math.PI * 2;\n        this.velocityX = Math.random() * 2 - 1;\n        this.velocityY = Math.random() * 2 - 1;\n        this.life = Math.random() * 300 + 100; // Reset lifespan\n      }\n    }\n\n    // Initialize Particles with 5 Layers\n    function init() {\n      particlesArray.length = 0;\n      const numParticles = 75; // Number of particles\n      const numLayers = 5; // Number of layers\n\n      for (let i = 0; i < numParticles; i++) {\n        const x = Math.random() * canvas.width;\n        const y = Math.random() * canvas.height;\n        const layer = Math.floor(Math.random() * numLayers); // Random layer between 0 and 4\n        particlesArray.push(new Particle(x, y, layer));\n      }\n    }\n\n    // Animation Loop\n    function animate() {\n      context.clearRect(0, 0, canvas.width, canvas.height);\n      particlesArray.forEach(particle => particle.update());\n      requestAnimationFrame(animate);\n    }\n    init();\n    animate();\n\n    // Resize canvas and re-initialize particles on window resize\n    window.addEventListener('resize', () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n      init();\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    className: \"particles-canvas\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 5\n  }, this);\n};\n_s(Particles, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = Particles;\nexport default Particles;\nvar _c;\n$RefreshReg$(_c, \"Particles\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","Particles","_s","canvasRef","canvas","current","context","getContext","width","window","innerWidth","height","innerHeight","particlesArray","mouse","x","y","addEventListener","event","Particle","constructor","layer","size","Math","random","baseSize","orbitRadius","angle","PI","velocityX","velocityY","color","pulseSpeed","life","draw","gradient","createRadialGradient","addColorStop","beginPath","arc","fillStyle","fill","closePath","update","sin","Date","now","targetX","cos","targetY","force","accelX","accelY","respawn","init","length","numParticles","numLayers","i","floor","push","animate","clearRect","forEach","particle","requestAnimationFrame","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/avi/Desktop/mywebsite/personal-website/src/components/Particles.js"],"sourcesContent":["// src/components/Particles.js\nimport React, { useEffect, useRef } from 'react';\nimport './Particles.css';\n\nconst Particles = () => {\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n\n    const particlesArray = [];\n    const mouse = {\n      x: null,\n      y: null,\n    };\n\n    // Mouse Event Listener\n    window.addEventListener('mousemove', (event) => {\n      mouse.x = event.x;\n      mouse.y = event.y;\n    });\n\n    class Particle {\n      constructor(x, y, layer) {\n        this.x = x;\n        this.y = y;\n        this.layer = layer; // Assign each particle a specific layer (0-4)\n        this.size = Math.random() * 30 + 10; // Size between 10 and 40 for variety\n        this.baseSize = this.size; // Base size to help with pulsing\n        this.orbitRadius = Math.random() * 100 + 50; // Random orbit radius between 50 and 150\n        this.angle = Math.random() * Math.PI * 2; // Random initial angle for orbit\n        this.velocityX = Math.random() * 2 - 1; // Random X velocity for unpredictable motion\n        this.velocityY = Math.random() * 2 - 1; // Random Y velocity for unpredictable motion\n        this.color = `hsl(${Math.random() * 360}, 100%, 60%)`; // Brighter colors for vivid effect\n        this.pulseSpeed = Math.random() * 0.05 + 0.02; // Speed of pulsing effect\n        this.life = Math.random() * 300 + 100; // Lifespan of each particle\n      }\n\n      draw() {\n        // Create a radial gradient to simulate a 3D effect\n        const gradient = context.createRadialGradient(\n          this.x - this.size / 4,\n          this.y - this.size / 4,\n          this.size / 5,\n          this.x,\n          this.y,\n          this.size\n        );\n        gradient.addColorStop(0, 'white');\n        gradient.addColorStop(0.3, this.color);\n        gradient.addColorStop(1, 'black');\n\n        context.beginPath();\n        context.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n        context.fillStyle = gradient;\n        context.fill();\n        context.closePath();\n      }\n\n      update() {\n        // Pulsing effect to make particles \"breathe\"\n        this.size = this.baseSize + Math.sin(Date.now() * this.pulseSpeed) * 5;\n\n        // If the mouse is present, make particles orbit around it\n        if (mouse.x !== null && mouse.y !== null) {\n          this.angle += 0.02; // Constantly change angle to simulate orbit\n\n          const targetX = mouse.x + Math.cos(this.angle) * this.orbitRadius;\n          const targetY = mouse.y + Math.sin(this.angle) * this.orbitRadius;\n\n          const force = 0.05; // Attraction force\n          const accelX = (targetX - this.x) * force;\n          const accelY = (targetY - this.y) * force;\n\n          this.velocityX += accelX;\n          this.velocityY += accelY;\n\n          // Apply velocity\n          this.x += this.velocityX;\n          this.y += this.velocityY;\n        }\n\n        // Slow down slightly to give smooth flowing effect\n        this.velocityX *= 0.96;\n        this.velocityY *= 0.96;\n\n        // Update position with unpredictable floating movement\n        this.x += Math.cos(this.angle) * 0.5;\n        this.y += Math.sin(this.angle) * 0.5;\n\n        // Ensure particles stay within canvas bounds or fly off\n        if (\n          this.x - this.size > canvas.width ||\n          this.x + this.size < 0 ||\n          this.y - this.size > canvas.height ||\n          this.y + this.size < 0\n        ) {\n          this.respawn(); // Respawn particle if it leaves the canvas\n        }\n\n        // Reduce life and respawn if expired\n        this.life--;\n        if (this.life <= 0) {\n          this.respawn();\n        }\n\n        this.draw();\n      }\n\n      respawn() {\n        this.x = Math.random() * canvas.width;\n        this.y = Math.random() * canvas.height;\n        this.size = Math.random() * 30 + 10;\n        this.baseSize = this.size;\n        this.orbitRadius = Math.random() * 100 + 50;\n        this.angle = Math.random() * Math.PI * 2;\n        this.velocityX = Math.random() * 2 - 1;\n        this.velocityY = Math.random() * 2 - 1;\n        this.life = Math.random() * 300 + 100; // Reset lifespan\n      }\n    }\n\n    // Initialize Particles with 5 Layers\n    function init() {\n      particlesArray.length = 0;\n      const numParticles = 75; // Number of particles\n      const numLayers = 5; // Number of layers\n\n      for (let i = 0; i < numParticles; i++) {\n        const x = Math.random() * canvas.width;\n        const y = Math.random() * canvas.height;\n        const layer = Math.floor(Math.random() * numLayers); // Random layer between 0 and 4\n        particlesArray.push(new Particle(x, y, layer));\n      }\n    }\n\n    // Animation Loop\n    function animate() {\n      context.clearRect(0, 0, canvas.width, canvas.height);\n      particlesArray.forEach(particle => particle.update());\n      requestAnimationFrame(animate);\n    }\n\n    init();\n    animate();\n\n    // Resize canvas and re-initialize particles on window resize\n    window.addEventListener('resize', () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n      init();\n    });\n  }, []);\n\n  return (\n    <canvas ref={canvasRef} className=\"particles-canvas\"></canvas>\n  );\n};\n\nexport default Particles;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}