{"ast":null,"code":"var _jsxFileName = \"/Users/avi/Desktop/mywebsite/personal-website/src/components/Particles.js\",\n  _s = $RefreshSig$();\n// src/components/Particles.js\nimport React, { useEffect, useRef } from 'react';\nimport './Particles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Particles = () => {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n    const particlesArray = [];\n    const mouse = {\n      x: null,\n      y: null\n    };\n\n    // Mouse Event Listener\n    window.addEventListener('mousemove', event => {\n      mouse.x = event.x;\n      mouse.y = event.y;\n    });\n    class Particle {\n      constructor(x, y, layer) {\n        this.x = x;\n        this.y = y;\n        this.layer = layer; // Assign each particle a specific layer (0-4)\n        this.size = Math.random() * 20 + 20; // Increased size for better visibility\n        this.baseX = x;\n        this.baseY = y;\n        this.speedX = Math.random() * 1.5 - 0.75; // Random X speed\n        this.speedY = Math.random() * 1.5 - 0.75; // Random Y speed\n        this.color = `hsl(${Math.random() * 360}, 100%, 60%)`; // Brighter colors for vivid effect\n      }\n      draw() {\n        // Create a radial gradient to simulate a 3D effect\n        const gradient = context.createRadialGradient(this.x - this.size / 4, this.y - this.size / 4, this.size / 5, this.x, this.y, this.size);\n        gradient.addColorStop(0, 'white');\n        gradient.addColorStop(0.3, this.color);\n        gradient.addColorStop(1, 'black');\n        context.beginPath();\n        context.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n        context.fillStyle = gradient;\n        context.fill();\n        context.closePath();\n      }\n      update(particles) {\n        // Attraction to mouse\n        if (mouse.x !== null && mouse.y !== null) {\n          const dx = mouse.x - this.x;\n          const dy = mouse.y - this.y;\n          const force = 0.01; // Strength of attraction\n          this.x += dx * force;\n          this.y += dy * force;\n        }\n\n        // Move particles in their own random directions\n        this.x += this.speedX;\n        this.y += this.speedY;\n\n        // Ensure particles stay within canvas bounds\n        if (this.x + this.size > canvas.width || this.x - this.size < 0) {\n          this.speedX = -this.speedX;\n        }\n        if (this.y + this.size > canvas.height || this.y - this.size < 0) {\n          this.speedY = -this.speedY;\n        }\n\n        // Collision detection between particles of the same layer\n        particles.forEach(particle => {\n          if (this === particle || this.layer !== particle.layer) return; // Skip self or particles of different layers\n\n          const dx = particle.x - this.x;\n          const dy = particle.y - this.y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n          if (distance < this.size + particle.size) {\n            // Collision response: particles push away from each other\n            const angle = Math.atan2(dy, dx);\n            const overlap = this.size + particle.size - distance;\n            this.x -= Math.cos(angle) * overlap / 2;\n            this.y -= Math.sin(angle) * overlap / 2;\n            particle.x += Math.cos(angle) * overlap / 2;\n            particle.y += Math.sin(angle) * overlap / 2;\n\n            // Adjust speed on collision\n            this.speedX = -this.speedX;\n            this.speedY = -this.speedY;\n            particle.speedX = -particle.speedX;\n            particle.speedY = -particle.speedY;\n          }\n        });\n        this.draw();\n      }\n    }\n\n    // Initialize Particles with 5 Layers\n    function init() {\n      particlesArray.length = 0;\n      const numParticles = 75; // Number of particles\n      const numLayers = 5; // Number of layers\n\n      for (let i = 0; i < numParticles; i++) {\n        const x = Math.random() * canvas.width;\n        const y = Math.random() * canvas.height;\n        const layer = Math.floor(Math.random() * numLayers); // Random layer between 0 and 4\n        particlesArray.push(new Particle(x, y, layer));\n      }\n    }\n\n    // Animation Loop\n    function animate() {\n      context.clearRect(0, 0, canvas.width, canvas.height);\n      particlesArray.forEach(particle => particle.update(particlesArray));\n      requestAnimationFrame(animate);\n    }\n    init();\n    animate();\n\n    // Resize canvas and re-initialize particles on window resize\n    window.addEventListener('resize', () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n      init();\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    className: \"particles-canvas\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n};\n_s(Particles, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = Particles;\nexport default Particles;\nvar _c;\n$RefreshReg$(_c, \"Particles\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","Particles","_s","canvasRef","canvas","current","context","getContext","width","window","innerWidth","height","innerHeight","particlesArray","mouse","x","y","addEventListener","event","Particle","constructor","layer","size","Math","random","baseX","baseY","speedX","speedY","color","draw","gradient","createRadialGradient","addColorStop","beginPath","arc","PI","fillStyle","fill","closePath","update","particles","dx","dy","force","forEach","particle","distance","sqrt","angle","atan2","overlap","cos","sin","init","length","numParticles","numLayers","i","floor","push","animate","clearRect","requestAnimationFrame","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/avi/Desktop/mywebsite/personal-website/src/components/Particles.js"],"sourcesContent":["// src/components/Particles.js\nimport React, { useEffect, useRef } from 'react';\nimport './Particles.css';\n\nconst Particles = () => {\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n\n    const particlesArray = [];\n    const mouse = {\n      x: null,\n      y: null,\n    };\n\n    // Mouse Event Listener\n    window.addEventListener('mousemove', (event) => {\n      mouse.x = event.x;\n      mouse.y = event.y;\n    });\n\n    class Particle {\n      constructor(x, y, layer) {\n        this.x = x;\n        this.y = y;\n        this.layer = layer; // Assign each particle a specific layer (0-4)\n        this.size = Math.random() * 20 + 20; // Increased size for better visibility\n        this.baseX = x;\n        this.baseY = y;\n        this.speedX = Math.random() * 1.5 - 0.75; // Random X speed\n        this.speedY = Math.random() * 1.5 - 0.75; // Random Y speed\n        this.color = `hsl(${Math.random() * 360}, 100%, 60%)`; // Brighter colors for vivid effect\n      }\n\n      draw() {\n        // Create a radial gradient to simulate a 3D effect\n        const gradient = context.createRadialGradient(\n          this.x - this.size / 4,\n          this.y - this.size / 4,\n          this.size / 5,\n          this.x,\n          this.y,\n          this.size\n        );\n        gradient.addColorStop(0, 'white');\n        gradient.addColorStop(0.3, this.color);\n        gradient.addColorStop(1, 'black');\n\n        context.beginPath();\n        context.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n        context.fillStyle = gradient;\n        context.fill();\n        context.closePath();\n      }\n\n      update(particles) {\n        // Attraction to mouse\n        if (mouse.x !== null && mouse.y !== null) {\n          const dx = mouse.x - this.x;\n          const dy = mouse.y - this.y;\n          const force = 0.01; // Strength of attraction\n          this.x += dx * force;\n          this.y += dy * force;\n        }\n\n        // Move particles in their own random directions\n        this.x += this.speedX;\n        this.y += this.speedY;\n\n        // Ensure particles stay within canvas bounds\n        if (this.x + this.size > canvas.width || this.x - this.size < 0) {\n          this.speedX = -this.speedX;\n        }\n        if (this.y + this.size > canvas.height || this.y - this.size < 0) {\n          this.speedY = -this.speedY;\n        }\n\n        // Collision detection between particles of the same layer\n        particles.forEach(particle => {\n          if (this === particle || this.layer !== particle.layer) return; // Skip self or particles of different layers\n\n          const dx = particle.x - this.x;\n          const dy = particle.y - this.y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n\n          if (distance < this.size + particle.size) {\n            // Collision response: particles push away from each other\n            const angle = Math.atan2(dy, dx);\n            const overlap = (this.size + particle.size) - distance;\n\n            this.x -= Math.cos(angle) * overlap / 2;\n            this.y -= Math.sin(angle) * overlap / 2;\n\n            particle.x += Math.cos(angle) * overlap / 2;\n            particle.y += Math.sin(angle) * overlap / 2;\n\n            // Adjust speed on collision\n            this.speedX = -this.speedX;\n            this.speedY = -this.speedY;\n            particle.speedX = -particle.speedX;\n            particle.speedY = -particle.speedY;\n          }\n        });\n\n        this.draw();\n      }\n    }\n\n    // Initialize Particles with 5 Layers\n    function init() {\n      particlesArray.length = 0;\n      const numParticles = 75; // Number of particles\n      const numLayers = 5; // Number of layers\n\n      for (let i = 0; i < numParticles; i++) {\n        const x = Math.random() * canvas.width;\n        const y = Math.random() * canvas.height;\n        const layer = Math.floor(Math.random() * numLayers); // Random layer between 0 and 4\n        particlesArray.push(new Particle(x, y, layer));\n      }\n    }\n\n    // Animation Loop\n    function animate() {\n      context.clearRect(0, 0, canvas.width, canvas.height);\n      particlesArray.forEach(particle => particle.update(particlesArray));\n      requestAnimationFrame(animate);\n    }\n\n    init();\n    animate();\n\n    // Resize canvas and re-initialize particles on window resize\n    window.addEventListener('resize', () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n      init();\n    });\n  }, []);\n\n  return (\n    <canvas ref={canvasRef} className=\"particles-canvas\"></canvas>\n  );\n};\n\nexport default Particles;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}