{"ast":null,"code":"/**\r\n * @author pailhead / http://dusanbosnjak.com\r\n */\nmodule.exports = function (THREE) {\n  RoundedBoxGeometry = function (width, height, depth, radius, radiusSegments) {\n    THREE.BufferGeometry.call(this);\n    this.type = 'RoundedBoxGeometry';\n\n    //validate params ===================================\n\n    radiusSegments = !isNaN(radiusSegments) ? Math.max(1, Math.floor(radiusSegments)) : 1;\n    width = !isNaN(width) ? width : 1;\n    height = !isNaN(height) ? height : 1;\n    depth = !isNaN(depth) ? depth : 1;\n    radius = !isNaN(radius) ? radius : .15;\n    radius = Math.min(radius, Math.min(width, Math.min(height, Math.min(depth))) / 2);\n    var edgeHalfWidth = width / 2 - radius;\n    var edgeHalfHeight = height / 2 - radius;\n    var edgeHalfDepth = depth / 2 - radius;\n\n    //not sure why this is needed, for querying? ========\n\n    this.parameters = {\n      width: width,\n      height: height,\n      depth: depth,\n      radius: radius,\n      radiusSegments: radiusSegments\n    };\n\n    //calculate vertices count ==========================\n\n    var rs1 = radiusSegments + 1; //radius segments + 1 \n\n    var totalVertexCount = rs1 * radiusSegments + 1 << 3;\n\n    //make buffers ======================================\n\n    var positions = new THREE.BufferAttribute(new Float32Array(totalVertexCount * 3), 3);\n    var normals = new THREE.BufferAttribute(new Float32Array(totalVertexCount * 3), 3);\n\n    //some vars =========================================\n\n    var cornerVerts = [],\n      cornerNormals = [],\n      normal = new THREE.Vector3(),\n      vertex = new THREE.Vector3(),\n      vertexPool = [],\n      normalPool = [],\n      indices = [];\n    var lastVertex = rs1 * radiusSegments,\n      cornerVertNumber = rs1 * radiusSegments + 1;\n    doVertices();\n    doFaces();\n    doCorners();\n    doHeightEdges();\n    doWidthEdges();\n    doDepthEdges();\n\n    // calculate vert positions =========================\n\n    function doVertices() {\n      //corner offsets\n      var cornerLayout = [new THREE.Vector3(1, 1, 1), new THREE.Vector3(1, 1, -1), new THREE.Vector3(-1, 1, -1), new THREE.Vector3(-1, 1, 1), new THREE.Vector3(1, -1, 1), new THREE.Vector3(1, -1, -1), new THREE.Vector3(-1, -1, -1), new THREE.Vector3(-1, -1, 1)];\n\n      //corner holder \n      for (var j = 0; j < 8; j++) {\n        cornerVerts.push([]);\n        cornerNormals.push([]);\n      }\n\n      //construct 1/8 sphere ==============================\n\n      var PIhalf = Math.PI / 2;\n      var cornerOffset = new THREE.Vector3(edgeHalfWidth, edgeHalfHeight, edgeHalfDepth);\n      for (var y = 0; y <= radiusSegments; y++) {\n        var v = y / radiusSegments;\n        var va = v * PIhalf; //arrange in 90 deg\n\n        var cosVa = Math.cos(va); //scale of vertical angle \n\n        var sinVa = Math.sin(va);\n        if (y == radiusSegments) {\n          vertex.set(0, 1, 0);\n          var vert = vertex.clone().multiplyScalar(radius).add(cornerOffset);\n          cornerVerts[0].push(vert);\n          vertexPool.push(vert);\n          var norm = vertex.clone();\n          cornerNormals[0].push(norm);\n          normalPool.push(norm);\n          continue; //skip row loop\n        }\n        for (var x = 0; x <= radiusSegments; x++) {\n          var u = x / radiusSegments;\n          var ha = u * PIhalf;\n\n          //make 1/8 sphere points\n          vertex.x = cosVa * Math.cos(ha);\n          vertex.y = sinVa;\n          vertex.z = cosVa * Math.sin(ha);\n\n          //copy sphere point, scale by radius, offset by half whd\n          var vert = vertex.clone().multiplyScalar(radius).add(cornerOffset);\n          cornerVerts[0].push(vert);\n          vertexPool.push(vert);\n\n          //sphere already normalized, just clone\n\n          var norm = vertex.clone().normalize();\n          cornerNormals[0].push(norm);\n          normalPool.push(norm);\n        }\n      }\n\n      //distribute corner verts ===========================\n\n      for (var i = 1; i < 8; i++) {\n        for (var j = 0; j < cornerVerts[0].length; j++) {\n          var vert = cornerVerts[0][j].clone().multiply(cornerLayout[i]);\n          cornerVerts[i].push(vert);\n          vertexPool.push(vert);\n          var norm = cornerNormals[0][j].clone().multiply(cornerLayout[i]);\n          cornerNormals[i].push(norm);\n          normalPool.push(norm);\n        }\n      }\n    }\n\n    // weave corners ====================================\n\n    function doCorners() {\n      var indexInd = 0;\n      var flips = [true, false, true, false, false, true, false, true];\n      var lastRowOffset = rs1 * (radiusSegments - 1);\n      for (var i = 0; i < 8; i++) {\n        var cornerOffset = cornerVertNumber * i;\n        for (var v = 0; v < radiusSegments - 1; v++) {\n          var r1 = v * rs1; //row offset\n          var r2 = (v + 1) * rs1; //next row\n\n          for (var u = 0; u < radiusSegments; u++) {\n            var u1 = u + 1;\n            var a = cornerOffset + r1 + u;\n            var b = cornerOffset + r1 + u1;\n            var c = cornerOffset + r2 + u;\n            var d = cornerOffset + r2 + u1;\n            if (!flips[i]) {\n              indices.push(a);\n              indices.push(b);\n              indices.push(c);\n              indices.push(b);\n              indices.push(d);\n              indices.push(c);\n            } else {\n              indices.push(a);\n              indices.push(c);\n              indices.push(b);\n              indices.push(b);\n              indices.push(c);\n              indices.push(d);\n            }\n          }\n        }\n        for (var u = 0; u < radiusSegments; u++) {\n          var a = cornerOffset + lastRowOffset + u;\n          var b = cornerOffset + lastRowOffset + u + 1;\n          var c = cornerOffset + lastVertex;\n          if (!flips[i]) {\n            indices.push(a);\n            indices.push(b);\n            indices.push(c);\n          } else {\n            indices.push(a);\n            indices.push(c);\n            indices.push(b);\n          }\n        }\n      }\n    }\n\n    //plates ============================================\n    //fix this loop matrices find pattern something\n\n    function doFaces() {\n      //top\n      var a = lastVertex; // + cornerVertNumber * 0;\n      var b = lastVertex + cornerVertNumber; // * 1;\n      var c = lastVertex + cornerVertNumber * 2;\n      var d = lastVertex + cornerVertNumber * 3;\n      indices.push(a);\n      indices.push(b);\n      indices.push(c);\n      indices.push(a);\n      indices.push(c);\n      indices.push(d);\n\n      //bottom\n      a = lastVertex + cornerVertNumber * 4; // + cornerVertNumber * 0;\n      b = lastVertex + cornerVertNumber * 5; // * 1;\n      c = lastVertex + cornerVertNumber * 6;\n      d = lastVertex + cornerVertNumber * 7;\n      indices.push(a);\n      indices.push(c);\n      indices.push(b);\n      indices.push(a);\n      indices.push(d);\n      indices.push(c);\n\n      //left \n      a = 0;\n      b = cornerVertNumber;\n      c = cornerVertNumber * 4;\n      d = cornerVertNumber * 5;\n      indices.push(a);\n      indices.push(c);\n      indices.push(b);\n      indices.push(b);\n      indices.push(c);\n      indices.push(d);\n\n      //right \n      a = cornerVertNumber * 2;\n      b = cornerVertNumber * 3;\n      c = cornerVertNumber * 6;\n      d = cornerVertNumber * 7;\n      indices.push(a);\n      indices.push(c);\n      indices.push(b);\n      indices.push(b);\n      indices.push(c);\n      indices.push(d);\n\n      //front \n      a = radiusSegments;\n      b = radiusSegments + cornerVertNumber * 3;\n      c = radiusSegments + cornerVertNumber * 4;\n      d = radiusSegments + cornerVertNumber * 7;\n      indices.push(a);\n      indices.push(b);\n      indices.push(c);\n      indices.push(b);\n      indices.push(d);\n      indices.push(c);\n\n      //back \n      a = radiusSegments + cornerVertNumber;\n      b = radiusSegments + cornerVertNumber * 2;\n      c = radiusSegments + cornerVertNumber * 5;\n      d = radiusSegments + cornerVertNumber * 6;\n      indices.push(a);\n      indices.push(c);\n      indices.push(b);\n      indices.push(b);\n      indices.push(c);\n      indices.push(d);\n    }\n\n    // weave edges ======================================\n\n    function doHeightEdges() {\n      for (var i = 0; i < 4; i++) {\n        var cOffset = i * cornerVertNumber;\n        var cRowOffset = 4 * cornerVertNumber + cOffset;\n        var needsFlip = i & 1 === 1;\n        for (var u = 0; u < radiusSegments; u++) {\n          var u1 = u + 1;\n          var a = cOffset + u;\n          var b = cOffset + u1;\n          var c = cRowOffset + u;\n          var d = cRowOffset + u1;\n          if (!needsFlip) {\n            indices.push(a);\n            indices.push(b);\n            indices.push(c);\n            indices.push(b);\n            indices.push(d);\n            indices.push(c);\n          } else {\n            indices.push(a);\n            indices.push(c);\n            indices.push(b);\n            indices.push(b);\n            indices.push(c);\n            indices.push(d);\n          }\n        }\n      }\n    }\n    function doDepthEdges() {\n      var cStarts = [0, 2, 4, 6];\n      var cEnds = [1, 3, 5, 7];\n      for (var i = 0; i < 4; i++) {\n        var cStart = cornerVertNumber * cStarts[i];\n        var cEnd = cornerVertNumber * cEnds[i];\n        var needsFlip = 1 >= i;\n        for (var u = 0; u < radiusSegments; u++) {\n          var urs1 = u * rs1;\n          var u1rs1 = (u + 1) * rs1;\n          var a = cStart + urs1;\n          var b = cStart + u1rs1;\n          var c = cEnd + urs1;\n          var d = cEnd + u1rs1;\n          if (needsFlip) {\n            indices.push(a);\n            indices.push(c);\n            indices.push(b);\n            indices.push(b);\n            indices.push(c);\n            indices.push(d);\n          } else {\n            indices.push(a);\n            indices.push(b);\n            indices.push(c);\n            indices.push(b);\n            indices.push(d);\n            indices.push(c);\n          }\n        }\n      }\n    }\n    function doWidthEdges() {\n      var end = radiusSegments - 1;\n      var cStarts = [0, 1, 4, 5];\n      var cEnds = [3, 2, 7, 6];\n      var needsFlip = [0, 1, 1, 0];\n      for (var i = 0; i < 4; i++) {\n        var cStart = cStarts[i] * cornerVertNumber;\n        var cEnd = cEnds[i] * cornerVertNumber;\n        for (var u = 0; u <= end; u++) {\n          // var dInd = u != end ? radiusSegments + u * rs1 : cornerVertNumber - 1;\n\n          var a = cStart + radiusSegments + u * rs1;\n          var b = cStart + (u != end ? radiusSegments + (u + 1) * rs1 : cornerVertNumber - 1);\n          var c = cEnd + radiusSegments + u * rs1;\n          var d = cEnd + (u != end ? radiusSegments + (u + 1) * rs1 : cornerVertNumber - 1);\n          if (!needsFlip[i]) {\n            indices.push(a);\n            indices.push(b);\n            indices.push(c);\n            indices.push(b);\n            indices.push(d);\n            indices.push(c);\n          } else {\n            indices.push(a);\n            indices.push(c);\n            indices.push(b);\n            indices.push(b);\n            indices.push(c);\n            indices.push(d);\n          }\n        }\n      }\n    }\n\n    //fill buffers ======================================\n\n    var index = 0;\n    for (var i = 0; i < vertexPool.length; i++) {\n      positions.setXYZ(index, vertexPool[i].x, vertexPool[i].y, vertexPool[i].z);\n      normals.setXYZ(index, normalPool[i].x, normalPool[i].y, normalPool[i].z);\n      index++;\n    }\n    this.setIndex(new THREE.BufferAttribute(new Uint16Array(indices), 1));\n    this.addAttribute('position', positions);\n    this.addAttribute('normal', normals);\n  };\n  RoundedBoxGeometry.prototype = Object.create(THREE.BufferGeometry.prototype);\n  RoundedBoxGeometry.constructor = RoundedBoxGeometry;\n  return RoundedBoxGeometry;\n};","map":{"version":3,"names":["module","exports","THREE","RoundedBoxGeometry","width","height","depth","radius","radiusSegments","BufferGeometry","call","type","isNaN","Math","max","floor","min","edgeHalfWidth","edgeHalfHeight","edgeHalfDepth","parameters","rs1","totalVertexCount","positions","BufferAttribute","Float32Array","normals","cornerVerts","cornerNormals","normal","Vector3","vertex","vertexPool","normalPool","indices","lastVertex","cornerVertNumber","doVertices","doFaces","doCorners","doHeightEdges","doWidthEdges","doDepthEdges","cornerLayout","j","push","PIhalf","PI","cornerOffset","y","v","va","cosVa","cos","sinVa","sin","set","vert","clone","multiplyScalar","add","norm","x","u","ha","z","normalize","i","length","multiply","indexInd","flips","lastRowOffset","r1","r2","u1","a","b","c","d","cOffset","cRowOffset","needsFlip","cStarts","cEnds","cStart","cEnd","urs1","u1rs1","end","index","setXYZ","setIndex","Uint16Array","addAttribute","prototype","Object","create","constructor"],"sources":["/Users/avi/Desktop/mywebsite/node_modules/three-rounded-box/index.js"],"sourcesContent":["/**\r\n * @author pailhead / http://dusanbosnjak.com\r\n */\r\nmodule.exports = function( THREE ){\r\n\r\nRoundedBoxGeometry = function ( \r\n\twidth , \r\n\theight , \r\n\tdepth , \r\n\tradius, \r\n\tradiusSegments\r\n) {\r\n\r\n\tTHREE.BufferGeometry.call( this );\r\n\r\n\tthis.type = 'RoundedBoxGeometry';\r\n\r\n\r\n\t//validate params ===================================\r\n\r\n\tradiusSegments = !isNaN( radiusSegments ) ? Math.max( 1, Math.floor( radiusSegments ) ) : 1 ;\r\n\r\n\twidth =  !isNaN(width)  ? width  : 1;\r\n\theight = !isNaN(height) ? height : 1;\r\n\tdepth =  !isNaN(depth)  ? depth  : 1;\r\n\r\n\tradius = !isNaN(radius) ? radius : .15;\r\n\r\n\tradius = Math.min( radius , Math.min( width , Math.min( height , Math.min( depth ) ) ) / 2 );\r\n\r\n\tvar edgeHalfWidth =  width / 2 - radius;\r\n\tvar edgeHalfHeight = height / 2 - radius;\r\n\tvar edgeHalfDepth =  depth / 2 - radius;\r\n\r\n\r\n\t//not sure why this is needed, for querying? ========\r\n\r\n\tthis.parameters = {\r\n\t\twidth: width , \r\n\t\theight: height , \r\n\t\tdepth: depth , \r\n\t\tradius: radius, \r\n\t\tradiusSegments: radiusSegments\r\n\t};\r\n\r\n\r\n\t//calculate vertices count ==========================\r\n\r\n\tvar rs1 =  radiusSegments + 1; //radius segments + 1 \r\n\r\n\tvar totalVertexCount = ( rs1 * radiusSegments + 1 ) << 3; \r\n\r\n\r\n\t//make buffers ======================================\r\n\r\n\tvar positions = \tnew THREE.BufferAttribute( new Float32Array( totalVertexCount * 3 ), 3 );\r\n\t\r\n\tvar normals = \t\tnew THREE.BufferAttribute( new Float32Array( totalVertexCount * 3 ), 3 );\r\n\t\r\n\r\n\t//some vars =========================================\r\n\r\n\tvar \r\n\t\tcornerVerts = [], \r\n\t\tcornerNormals = [],\r\n\t\tnormal = new THREE.Vector3(),\r\n\t\tvertex = new THREE.Vector3(),\r\n\t\tvertexPool = [],\r\n\t\tnormalPool = [],\r\n\t\tindices = []\r\n\t;\r\n\r\n\tvar\r\n\t\tlastVertex = rs1 * radiusSegments,\r\n\t\tcornerVertNumber = rs1 * radiusSegments + 1\r\n\t;\r\n\r\n\tdoVertices();\r\n\tdoFaces();\r\n\tdoCorners();\r\n\tdoHeightEdges();\r\n\tdoWidthEdges();\r\n\tdoDepthEdges()\r\n\r\n\t// calculate vert positions =========================\r\n\r\n\tfunction doVertices(){\r\n\r\n\t\t//corner offsets\r\n\t\tvar cornerLayout = [\r\n\t\t\tnew THREE.Vector3(  1 ,  1 ,  1 ),\r\n\t\t\tnew THREE.Vector3(  1 ,  1 , -1 ),\r\n\t\t\tnew THREE.Vector3( -1 ,  1 , -1 ),\r\n\t\t\tnew THREE.Vector3( -1 ,  1 ,  1 ),\r\n\t\t\tnew THREE.Vector3(  1 , -1 ,  1 ),\r\n\t\t\tnew THREE.Vector3(  1 , -1 , -1 ),\r\n\t\t\tnew THREE.Vector3( -1 , -1 , -1 ),\r\n\t\t\tnew THREE.Vector3( -1 , -1 ,  1 )\r\n\t\t];\r\n\r\n\t\t//corner holder \r\n\t\tfor ( var j = 0 ; j < 8 ; j ++ ){\r\n\r\n\t\t\tcornerVerts.push([]); \r\n\t\t\tcornerNormals.push([]); \r\n\r\n\t\t}\r\n\r\n\t\t//construct 1/8 sphere ==============================\r\n\r\n\t\tvar PIhalf = Math.PI / 2;\r\n\r\n\t\tvar cornerOffset = new THREE.Vector3( edgeHalfWidth , edgeHalfHeight , edgeHalfDepth );\r\n\r\n\t\tfor ( var y = 0; y <= radiusSegments; y ++ ) {\r\n\r\n\t\t\tvar v = y / radiusSegments;\r\n\r\n\t\t\tvar va = v * PIhalf; //arrange in 90 deg\r\n\r\n\t\t\tvar cosVa = Math.cos( va ); //scale of vertical angle \r\n\r\n\t\t\tvar sinVa = Math.sin( va );\r\n\r\n\t\t\tif( y == radiusSegments ){\r\n\r\n\t\t\t\tvertex.set( 0 , 1 , 0 );\r\n\r\n\t\t\t\tvar vert = vertex.clone().multiplyScalar( radius ).add( cornerOffset );\r\n\t\t\t\t\r\n\t\t\t\tcornerVerts[0].push( vert );\r\n\r\n\t\t\t\tvertexPool.push( vert );\r\n\t\t\t\t\r\n\t\t\t\tvar norm = vertex.clone();\r\n\r\n\t\t\t\tcornerNormals[0].push( norm );\r\n\r\n\t\t\t\tnormalPool.push( norm );\r\n\r\n\t\t\t\tcontinue; //skip row loop\r\n\t\t\t\r\n\t\t\t} \t\r\n\r\n\t\t\tfor ( var x = 0; x <= radiusSegments; x ++ ) {\r\n\r\n\t\t\t\tvar u = x / radiusSegments;\r\n\r\n\t\t\t\tvar ha = u * PIhalf;\r\n\r\n\t\t\t\t//make 1/8 sphere points\r\n\t\t\t\tvertex.x = cosVa * Math.cos( ha );\r\n\t\t\t\tvertex.y = sinVa;\r\n\t\t\t\tvertex.z = cosVa * Math.sin( ha );\r\n\r\n\t\t\t\t//copy sphere point, scale by radius, offset by half whd\r\n\t\t\t\tvar vert = vertex.clone().multiplyScalar( radius ).add( cornerOffset );\r\n\r\n\t\t\t\tcornerVerts[0].push( vert );\r\n\r\n\t\t\t\tvertexPool.push( vert );\r\n\t\t\t\t\r\n\t\t\t\t//sphere already normalized, just clone\r\n\r\n\t\t\t\tvar norm = vertex.clone().normalize();\r\n\t\t\t\tcornerNormals[0].push( norm );\r\n\t\t\t\tnormalPool.push( norm );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//distribute corner verts ===========================\r\n\r\n\t\tfor ( var i = 1 ; i < 8 ; i ++ ){\r\n\r\n\t\t\tfor( var j = 0 ; j < cornerVerts[0].length ; j ++ ){\r\n\r\n\t\t\t\tvar vert = cornerVerts[0][j].clone().multiply( cornerLayout[i] );\r\n\r\n\t\t\t\tcornerVerts[i].push( vert );\r\n\t\t\t\t\r\n\t\t\t\tvertexPool.push( vert );\r\n\r\n\t\t\t\tvar norm = cornerNormals[0][j].clone().multiply( cornerLayout[i] );\r\n\r\n\t\t\t\tcornerNormals[i].push( norm );\r\n\r\n\t\t\t\tnormalPool.push( norm );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\t\r\n\r\n\t}\r\n\t\r\n\r\n\t// weave corners ====================================\r\n\r\n\tfunction doCorners(){\r\n\r\n\t\tvar indexInd = 0;\r\n\r\n\r\n\t\tvar flips = [\r\n\t\t\ttrue,\r\n\t\t\tfalse,\r\n\t\t\ttrue,\r\n\t\t\tfalse,\r\n\t\t\tfalse,\r\n\t\t\ttrue,\r\n\t\t\tfalse,\r\n\t\t\ttrue\r\n\t\t];\r\n\r\n\t\tvar lastRowOffset = rs1 * ( radiusSegments - 1 );\r\n\r\n\t\tfor ( var i = 0 ; i < 8 ; i ++ ){\r\n\r\n\t\t\tvar cornerOffset = cornerVertNumber * i;\r\n\r\n\t\t\tfor ( var v = 0 ; v < radiusSegments - 1 ; v ++ ){\r\n\r\n\t\t\t\tvar r1 = v * rs1; \t\t//row offset\r\n\t\t\t\tvar r2 = (v + 1) * rs1; //next row\r\n\r\n\t\t\t\tfor ( var u = 0 ; u < radiusSegments ; u ++ ){\r\n\r\n\t\t\t\t\tvar u1 = u + 1;\r\n\t\t\t\t\tvar a = cornerOffset + r1 + u;\r\n\t\t\t\t\tvar b = cornerOffset + r1 + u1;\r\n\t\t\t\t\tvar c = cornerOffset + r2 + u;\r\n\t\t\t\t\tvar d = cornerOffset + r2 + u1;\r\n\r\n\t\t\t\t\tif( !flips[i] ){\r\n\r\n\t\t\t\t\t\tindices.push( a );\r\n\t\t\t\t\t\tindices.push( b );\r\n\t\t\t\t\t\tindices.push( c );\r\n\r\n\t\t\t\t\t\tindices.push( b );\r\n\t\t\t\t\t\tindices.push( d );\r\n\t\t\t\t\t\tindices.push( c );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tindices.push( a );\r\n\t\t\t\t\t\tindices.push( c );\r\n\t\t\t\t\t\tindices.push( b );\r\n\r\n\t\t\t\t\t\tindices.push( b );\r\n\t\t\t\t\t\tindices.push( c );\r\n\t\t\t\t\t\tindices.push( d );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor ( var u = 0 ; u < radiusSegments ; u ++ ){\r\n\r\n\t\t\t\tvar a = cornerOffset + lastRowOffset + u;\r\n\t\t\t\tvar b = cornerOffset + lastRowOffset + u + 1;\r\n\t\t\t\tvar c = cornerOffset + lastVertex;\r\n\r\n\t\t\t\tif( !flips[i] ){\r\n\r\n\t\t\t\t\tindices.push( a );\r\n\t\t\t\t\tindices.push( b );\r\n\t\t\t\t\tindices.push( c );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tindices.push( a );\r\n\t\t\t\t\tindices.push( c );\r\n\t\t\t\t\tindices.push( b );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\t\r\n\r\n\t//plates ============================================\r\n\t//fix this loop matrices find pattern something\r\n\r\n\tfunction doFaces(){\r\n\r\n\t\t//top\r\n\t\tvar a = lastVertex;// + cornerVertNumber * 0;\r\n\t\tvar b = lastVertex + cornerVertNumber;// * 1;\r\n\t\tvar c = lastVertex + cornerVertNumber * 2;\r\n\t\tvar d = lastVertex + cornerVertNumber * 3;\r\n\r\n\t\tindices.push( a );\r\n\t\tindices.push( b );\r\n\t\tindices.push( c );\r\n\t\tindices.push( a );\r\n\t\tindices.push( c );\r\n\t\tindices.push( d );\r\n\r\n\t\t//bottom\r\n\t\ta = lastVertex + cornerVertNumber * 4;// + cornerVertNumber * 0;\r\n\t\tb = lastVertex + cornerVertNumber * 5;// * 1;\r\n\t\tc = lastVertex + cornerVertNumber * 6;\r\n\t\td = lastVertex + cornerVertNumber * 7;\r\n\r\n\t\tindices.push( a );\r\n\t\tindices.push( c );\r\n\t\tindices.push( b );\r\n\t\tindices.push( a );\r\n\t\tindices.push( d );\r\n\t\tindices.push( c );\r\n\r\n\t\t//left \r\n\t\ta = 0;\r\n\t\tb = cornerVertNumber;\r\n\t\tc = cornerVertNumber * 4;\r\n\t\td = cornerVertNumber * 5;\r\n\r\n\t\tindices.push( a );\r\n\t\tindices.push( c );\r\n\t\tindices.push( b );\r\n\t\tindices.push( b );\r\n\t\tindices.push( c );\r\n\t\tindices.push( d );\r\n\r\n\t\t//right \r\n\t\ta = cornerVertNumber * 2;\r\n\t\tb = cornerVertNumber * 3;\r\n\t\tc = cornerVertNumber * 6;\r\n\t\td = cornerVertNumber * 7;\r\n\r\n\t\tindices.push( a );\r\n\t\tindices.push( c );\r\n\t\tindices.push( b );\r\n\t\tindices.push( b );\r\n\t\tindices.push( c );\r\n\t\tindices.push( d );\r\n\r\n\t\t//front \r\n\t\ta = radiusSegments;\r\n\t\tb = radiusSegments + cornerVertNumber * 3;\r\n\t\tc = radiusSegments + cornerVertNumber * 4;\r\n\t\td = radiusSegments + cornerVertNumber * 7;\r\n\r\n\t\tindices.push( a );\r\n\t\tindices.push( b );\r\n\t\tindices.push( c );\r\n\t\tindices.push( b );\r\n\t\tindices.push( d );\r\n\t\tindices.push( c );\r\n\r\n\t\t//back \r\n\t\ta = radiusSegments + cornerVertNumber;\r\n\t\tb = radiusSegments + cornerVertNumber * 2;\r\n\t\tc = radiusSegments + cornerVertNumber * 5;\r\n\t\td = radiusSegments + cornerVertNumber * 6;\r\n\r\n\t\tindices.push( a );\r\n\t\tindices.push( c );\r\n\t\tindices.push( b );\r\n\t\tindices.push( b );\r\n\t\tindices.push( c );\r\n\t\tindices.push( d );\r\n\r\n\t}\r\n\r\n\r\n\t// weave edges ======================================\r\n\r\n\tfunction doHeightEdges(){\r\n\r\n\t\tfor ( var i = 0 ; i < 4 ; i ++ ){\r\n\r\n\t\t\tvar cOffset = i * cornerVertNumber;\r\n\t\t\tvar cRowOffset = 4 * cornerVertNumber + cOffset;\r\n\t\t\tvar needsFlip = i & 1 === 1;\r\n\t\t\tfor ( var u = 0 ; u < radiusSegments ; u ++ ){\r\n\r\n\t\t\t\tvar u1 = u + 1;\r\n\t\t\t\tvar a = cOffset + u;\r\n\t\t\t\tvar b = cOffset + u1;\r\n\t\t\t\tvar c = cRowOffset + u;\r\n\t\t\t\tvar d = cRowOffset + u1;\r\n\r\n\t\t\t\tif( !needsFlip ){\r\n\r\n\t\t\t\t\tindices.push( a );\r\n\t\t\t\t\tindices.push( b );\r\n\t\t\t\t\tindices.push( c );\r\n\t\t\t\t\tindices.push( b );\r\n\t\t\t\t\tindices.push( d );\r\n\t\t\t\t\tindices.push( c );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tindices.push( a );\r\n\t\t\t\t\tindices.push( c );\r\n\t\t\t\t\tindices.push( b );\r\n\t\t\t\t\tindices.push( b );\r\n\t\t\t\t\tindices.push( c );\r\n\t\t\t\t\tindices.push( d );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\t\r\n\tfunction doDepthEdges(){\r\n\r\n\t\tvar cStarts = [ 0 , 2 , 4 , 6 ];\r\n\t\tvar cEnds =   [ 1 , 3 , 5 , 7 ];\r\n\t\t\t\r\n\t\tfor ( var i = 0 ; i < 4 ; i ++ ){\r\n\r\n\t\t\tvar cStart = cornerVertNumber * cStarts[ i ];\r\n\t\t\tvar cEnd =   cornerVertNumber * cEnds[ i ];\r\n\r\n\t\t\tvar needsFlip = 1 >= i;\r\n\r\n\t\t\tfor ( var u = 0 ; u < radiusSegments ; u ++ ){\r\n\r\n\t\t\t\tvar urs1 =  u * rs1;\r\n\t\t\t\tvar u1rs1 = (u+1) * rs1;\r\n\r\n\t\t\t\tvar a = cStart + urs1;\r\n\t\t\t\tvar b = cStart + u1rs1;\r\n\t\t\t\tvar c = cEnd + urs1;\r\n\t\t\t\tvar d = cEnd + u1rs1\r\n\r\n\t\t\t\tif( needsFlip ){\r\n\r\n\t\t\t\t\tindices.push( a );\r\n\t\t\t\t\tindices.push( c );\r\n\t\t\t\t\tindices.push( b );\r\n\t\t\t\t\tindices.push( b );\r\n\t\t\t\t\tindices.push( c );\r\n\t\t\t\t\tindices.push( d );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tindices.push( a );\r\n\t\t\t\t\tindices.push( b );\r\n\t\t\t\t\tindices.push( c );\r\n\t\t\t\t\tindices.push( b );\r\n\t\t\t\t\tindices.push( d );\r\n\t\t\t\t\tindices.push( c );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction doWidthEdges(){\r\n\r\n\t\tvar end = radiusSegments - 1;\r\n\r\n\t\tvar cStarts = [ 0 , 1 , 4 , 5 ];\r\n\t\tvar cEnds =   [ 3 , 2 , 7 , 6 ];\r\n\t\tvar needsFlip = [0,1,1,0];\r\n\r\n\t\tfor ( var i = 0 ; i < 4 ; i ++ ){\r\n\r\n\t\t\tvar cStart = cStarts[i] * cornerVertNumber;\r\n\t\t\tvar cEnd = cEnds[i] * cornerVertNumber;\r\n\t\t\t\r\n\r\n\t\t\tfor ( var u = 0 ; u <= end ; u ++ ){\r\n\r\n\t\t\t\t// var dInd = u != end ? radiusSegments + u * rs1 : cornerVertNumber - 1;\r\n\r\n\t\t\t\tvar a = cStart + radiusSegments + u * rs1;\r\n\t\t\t\tvar b = cStart + (u != end ? radiusSegments + (u + 1) * rs1 : cornerVertNumber - 1);\r\n\r\n\t\t\t\tvar c = cEnd + radiusSegments + u * rs1;\r\n\t\t\t\tvar d = cEnd + (u != end ? radiusSegments + (u + 1) * rs1 : cornerVertNumber - 1);\r\n\r\n\t\t\t\tif( !needsFlip[i] ){\r\n\r\n\t\t\t\t\tindices.push( a );\r\n\t\t\t\t\tindices.push( b );\r\n\t\t\t\t\tindices.push( c );\r\n\t\t\t\t\tindices.push( b );\r\n\t\t\t\t\tindices.push( d );\r\n\t\t\t\t\tindices.push( c );\r\n\r\n\t\t\t\t} \r\n\t\t\t\telse {\r\n\r\n\t\t\t\t\tindices.push( a );\r\n\t\t\t\t\tindices.push( c );\r\n\t\t\t\t\tindices.push( b );\r\n\t\t\t\t\tindices.push( b );\r\n\t\t\t\t\tindices.push( c );\r\n\t\t\t\t\tindices.push( d );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t//fill buffers ======================================\r\n\r\n\tvar index = 0;\r\n\r\n\tfor ( var i = 0 ; i < vertexPool.length ; i ++ ){\r\n\r\n\t\tpositions.setXYZ( \r\n\t\t\tindex , \r\n\t\t\tvertexPool[i].x , \r\n\t\t\tvertexPool[i].y , \r\n\t\t\tvertexPool[i].z \r\n\t\t);\r\n\r\n\t\tnormals.setXYZ( \r\n\t\t\tindex , \r\n\t\t\tnormalPool[i].x , \r\n\t\t\tnormalPool[i].y , \r\n\t\t\tnormalPool[i].z \r\n\t\t);\r\n\r\n\t\tindex++;\r\n\r\n\t}\r\n\r\n\tthis.setIndex( new THREE.BufferAttribute( new Uint16Array( indices ) , 1 ) );\r\n\t\r\n\tthis.addAttribute( 'position', positions );\r\n\t\r\n\tthis.addAttribute( 'normal', normals );\r\n\t\r\n};\r\n\r\nRoundedBoxGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\nRoundedBoxGeometry.constructor = RoundedBoxGeometry;\r\n\r\nreturn RoundedBoxGeometry;\r\n\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACAA,MAAM,CAACC,OAAO,GAAG,UAAUC,KAAK,EAAE;EAElCC,kBAAkB,GAAG,SAAAA,CACpBC,KAAK,EACLC,MAAM,EACNC,KAAK,EACLC,MAAM,EACNC,cAAc,EACb;IAEDN,KAAK,CAACO,cAAc,CAACC,IAAI,CAAE,IAAK,CAAC;IAEjC,IAAI,CAACC,IAAI,GAAG,oBAAoB;;IAGhC;;IAEAH,cAAc,GAAG,CAACI,KAAK,CAAEJ,cAAe,CAAC,GAAGK,IAAI,CAACC,GAAG,CAAE,CAAC,EAAED,IAAI,CAACE,KAAK,CAAEP,cAAe,CAAE,CAAC,GAAG,CAAC;IAE3FJ,KAAK,GAAI,CAACQ,KAAK,CAACR,KAAK,CAAC,GAAIA,KAAK,GAAI,CAAC;IACpCC,MAAM,GAAG,CAACO,KAAK,CAACP,MAAM,CAAC,GAAGA,MAAM,GAAG,CAAC;IACpCC,KAAK,GAAI,CAACM,KAAK,CAACN,KAAK,CAAC,GAAIA,KAAK,GAAI,CAAC;IAEpCC,MAAM,GAAG,CAACK,KAAK,CAACL,MAAM,CAAC,GAAGA,MAAM,GAAG,GAAG;IAEtCA,MAAM,GAAGM,IAAI,CAACG,GAAG,CAAET,MAAM,EAAGM,IAAI,CAACG,GAAG,CAAEZ,KAAK,EAAGS,IAAI,CAACG,GAAG,CAAEX,MAAM,EAAGQ,IAAI,CAACG,GAAG,CAAEV,KAAM,CAAE,CAAE,CAAC,GAAG,CAAE,CAAC;IAE5F,IAAIW,aAAa,GAAIb,KAAK,GAAG,CAAC,GAAGG,MAAM;IACvC,IAAIW,cAAc,GAAGb,MAAM,GAAG,CAAC,GAAGE,MAAM;IACxC,IAAIY,aAAa,GAAIb,KAAK,GAAG,CAAC,GAAGC,MAAM;;IAGvC;;IAEA,IAAI,CAACa,UAAU,GAAG;MACjBhB,KAAK,EAAEA,KAAK;MACZC,MAAM,EAAEA,MAAM;MACdC,KAAK,EAAEA,KAAK;MACZC,MAAM,EAAEA,MAAM;MACdC,cAAc,EAAEA;IACjB,CAAC;;IAGD;;IAEA,IAAIa,GAAG,GAAIb,cAAc,GAAG,CAAC,CAAC,CAAC;;IAE/B,IAAIc,gBAAgB,GAAKD,GAAG,GAAGb,cAAc,GAAG,CAAC,IAAM,CAAC;;IAGxD;;IAEA,IAAIe,SAAS,GAAI,IAAIrB,KAAK,CAACsB,eAAe,CAAE,IAAIC,YAAY,CAAEH,gBAAgB,GAAG,CAAE,CAAC,EAAE,CAAE,CAAC;IAEzF,IAAII,OAAO,GAAK,IAAIxB,KAAK,CAACsB,eAAe,CAAE,IAAIC,YAAY,CAAEH,gBAAgB,GAAG,CAAE,CAAC,EAAE,CAAE,CAAC;;IAGxF;;IAEA,IACCK,WAAW,GAAG,EAAE;MAChBC,aAAa,GAAG,EAAE;MAClBC,MAAM,GAAG,IAAI3B,KAAK,CAAC4B,OAAO,CAAC,CAAC;MAC5BC,MAAM,GAAG,IAAI7B,KAAK,CAAC4B,OAAO,CAAC,CAAC;MAC5BE,UAAU,GAAG,EAAE;MACfC,UAAU,GAAG,EAAE;MACfC,OAAO,GAAG,EAAE;IAGb,IACCC,UAAU,GAAGd,GAAG,GAAGb,cAAc;MACjC4B,gBAAgB,GAAGf,GAAG,GAAGb,cAAc,GAAG,CAAC;IAG5C6B,UAAU,CAAC,CAAC;IACZC,OAAO,CAAC,CAAC;IACTC,SAAS,CAAC,CAAC;IACXC,aAAa,CAAC,CAAC;IACfC,YAAY,CAAC,CAAC;IACdC,YAAY,CAAC,CAAC;;IAEd;;IAEA,SAASL,UAAUA,CAAA,EAAE;MAEpB;MACA,IAAIM,YAAY,GAAG,CAClB,IAAIzC,KAAK,CAAC4B,OAAO,CAAG,CAAC,EAAI,CAAC,EAAI,CAAE,CAAC,EACjC,IAAI5B,KAAK,CAAC4B,OAAO,CAAG,CAAC,EAAI,CAAC,EAAG,CAAC,CAAE,CAAC,EACjC,IAAI5B,KAAK,CAAC4B,OAAO,CAAE,CAAC,CAAC,EAAI,CAAC,EAAG,CAAC,CAAE,CAAC,EACjC,IAAI5B,KAAK,CAAC4B,OAAO,CAAE,CAAC,CAAC,EAAI,CAAC,EAAI,CAAE,CAAC,EACjC,IAAI5B,KAAK,CAAC4B,OAAO,CAAG,CAAC,EAAG,CAAC,CAAC,EAAI,CAAE,CAAC,EACjC,IAAI5B,KAAK,CAAC4B,OAAO,CAAG,CAAC,EAAG,CAAC,CAAC,EAAG,CAAC,CAAE,CAAC,EACjC,IAAI5B,KAAK,CAAC4B,OAAO,CAAE,CAAC,CAAC,EAAG,CAAC,CAAC,EAAG,CAAC,CAAE,CAAC,EACjC,IAAI5B,KAAK,CAAC4B,OAAO,CAAE,CAAC,CAAC,EAAG,CAAC,CAAC,EAAI,CAAE,CAAC,CACjC;;MAED;MACA,KAAM,IAAIc,CAAC,GAAG,CAAC,EAAGA,CAAC,GAAG,CAAC,EAAGA,CAAC,EAAG,EAAE;QAE/BjB,WAAW,CAACkB,IAAI,CAAC,EAAE,CAAC;QACpBjB,aAAa,CAACiB,IAAI,CAAC,EAAE,CAAC;MAEvB;;MAEA;;MAEA,IAAIC,MAAM,GAAGjC,IAAI,CAACkC,EAAE,GAAG,CAAC;MAExB,IAAIC,YAAY,GAAG,IAAI9C,KAAK,CAAC4B,OAAO,CAAEb,aAAa,EAAGC,cAAc,EAAGC,aAAc,CAAC;MAEtF,KAAM,IAAI8B,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIzC,cAAc,EAAEyC,CAAC,EAAG,EAAG;QAE5C,IAAIC,CAAC,GAAGD,CAAC,GAAGzC,cAAc;QAE1B,IAAI2C,EAAE,GAAGD,CAAC,GAAGJ,MAAM,CAAC,CAAC;;QAErB,IAAIM,KAAK,GAAGvC,IAAI,CAACwC,GAAG,CAAEF,EAAG,CAAC,CAAC,CAAC;;QAE5B,IAAIG,KAAK,GAAGzC,IAAI,CAAC0C,GAAG,CAAEJ,EAAG,CAAC;QAE1B,IAAIF,CAAC,IAAIzC,cAAc,EAAE;UAExBuB,MAAM,CAACyB,GAAG,CAAE,CAAC,EAAG,CAAC,EAAG,CAAE,CAAC;UAEvB,IAAIC,IAAI,GAAG1B,MAAM,CAAC2B,KAAK,CAAC,CAAC,CAACC,cAAc,CAAEpD,MAAO,CAAC,CAACqD,GAAG,CAAEZ,YAAa,CAAC;UAEtErB,WAAW,CAAC,CAAC,CAAC,CAACkB,IAAI,CAAEY,IAAK,CAAC;UAE3BzB,UAAU,CAACa,IAAI,CAAEY,IAAK,CAAC;UAEvB,IAAII,IAAI,GAAG9B,MAAM,CAAC2B,KAAK,CAAC,CAAC;UAEzB9B,aAAa,CAAC,CAAC,CAAC,CAACiB,IAAI,CAAEgB,IAAK,CAAC;UAE7B5B,UAAU,CAACY,IAAI,CAAEgB,IAAK,CAAC;UAEvB,SAAS,CAAC;QAEX;QAEA,KAAM,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAItD,cAAc,EAAEsD,CAAC,EAAG,EAAG;UAE5C,IAAIC,CAAC,GAAGD,CAAC,GAAGtD,cAAc;UAE1B,IAAIwD,EAAE,GAAGD,CAAC,GAAGjB,MAAM;;UAEnB;UACAf,MAAM,CAAC+B,CAAC,GAAGV,KAAK,GAAGvC,IAAI,CAACwC,GAAG,CAAEW,EAAG,CAAC;UACjCjC,MAAM,CAACkB,CAAC,GAAGK,KAAK;UAChBvB,MAAM,CAACkC,CAAC,GAAGb,KAAK,GAAGvC,IAAI,CAAC0C,GAAG,CAAES,EAAG,CAAC;;UAEjC;UACA,IAAIP,IAAI,GAAG1B,MAAM,CAAC2B,KAAK,CAAC,CAAC,CAACC,cAAc,CAAEpD,MAAO,CAAC,CAACqD,GAAG,CAAEZ,YAAa,CAAC;UAEtErB,WAAW,CAAC,CAAC,CAAC,CAACkB,IAAI,CAAEY,IAAK,CAAC;UAE3BzB,UAAU,CAACa,IAAI,CAAEY,IAAK,CAAC;;UAEvB;;UAEA,IAAII,IAAI,GAAG9B,MAAM,CAAC2B,KAAK,CAAC,CAAC,CAACQ,SAAS,CAAC,CAAC;UACrCtC,aAAa,CAAC,CAAC,CAAC,CAACiB,IAAI,CAAEgB,IAAK,CAAC;UAC7B5B,UAAU,CAACY,IAAI,CAAEgB,IAAK,CAAC;QAExB;MAED;;MAEA;;MAEA,KAAM,IAAIM,CAAC,GAAG,CAAC,EAAGA,CAAC,GAAG,CAAC,EAAGA,CAAC,EAAG,EAAE;QAE/B,KAAK,IAAIvB,CAAC,GAAG,CAAC,EAAGA,CAAC,GAAGjB,WAAW,CAAC,CAAC,CAAC,CAACyC,MAAM,EAAGxB,CAAC,EAAG,EAAE;UAElD,IAAIa,IAAI,GAAG9B,WAAW,CAAC,CAAC,CAAC,CAACiB,CAAC,CAAC,CAACc,KAAK,CAAC,CAAC,CAACW,QAAQ,CAAE1B,YAAY,CAACwB,CAAC,CAAE,CAAC;UAEhExC,WAAW,CAACwC,CAAC,CAAC,CAACtB,IAAI,CAAEY,IAAK,CAAC;UAE3BzB,UAAU,CAACa,IAAI,CAAEY,IAAK,CAAC;UAEvB,IAAII,IAAI,GAAGjC,aAAa,CAAC,CAAC,CAAC,CAACgB,CAAC,CAAC,CAACc,KAAK,CAAC,CAAC,CAACW,QAAQ,CAAE1B,YAAY,CAACwB,CAAC,CAAE,CAAC;UAElEvC,aAAa,CAACuC,CAAC,CAAC,CAACtB,IAAI,CAAEgB,IAAK,CAAC;UAE7B5B,UAAU,CAACY,IAAI,CAAEgB,IAAK,CAAC;QAExB;MAED;IAED;;IAGA;;IAEA,SAAStB,SAASA,CAAA,EAAE;MAEnB,IAAI+B,QAAQ,GAAG,CAAC;MAGhB,IAAIC,KAAK,GAAG,CACX,IAAI,EACJ,KAAK,EACL,IAAI,EACJ,KAAK,EACL,KAAK,EACL,IAAI,EACJ,KAAK,EACL,IAAI,CACJ;MAED,IAAIC,aAAa,GAAGnD,GAAG,IAAKb,cAAc,GAAG,CAAC,CAAE;MAEhD,KAAM,IAAI2D,CAAC,GAAG,CAAC,EAAGA,CAAC,GAAG,CAAC,EAAGA,CAAC,EAAG,EAAE;QAE/B,IAAInB,YAAY,GAAGZ,gBAAgB,GAAG+B,CAAC;QAEvC,KAAM,IAAIjB,CAAC,GAAG,CAAC,EAAGA,CAAC,GAAG1C,cAAc,GAAG,CAAC,EAAG0C,CAAC,EAAG,EAAE;UAEhD,IAAIuB,EAAE,GAAGvB,CAAC,GAAG7B,GAAG,CAAC,CAAG;UACpB,IAAIqD,EAAE,GAAG,CAACxB,CAAC,GAAG,CAAC,IAAI7B,GAAG,CAAC,CAAC;;UAExB,KAAM,IAAI0C,CAAC,GAAG,CAAC,EAAGA,CAAC,GAAGvD,cAAc,EAAGuD,CAAC,EAAG,EAAE;YAE5C,IAAIY,EAAE,GAAGZ,CAAC,GAAG,CAAC;YACd,IAAIa,CAAC,GAAG5B,YAAY,GAAGyB,EAAE,GAAGV,CAAC;YAC7B,IAAIc,CAAC,GAAG7B,YAAY,GAAGyB,EAAE,GAAGE,EAAE;YAC9B,IAAIG,CAAC,GAAG9B,YAAY,GAAG0B,EAAE,GAAGX,CAAC;YAC7B,IAAIgB,CAAC,GAAG/B,YAAY,GAAG0B,EAAE,GAAGC,EAAE;YAE9B,IAAI,CAACJ,KAAK,CAACJ,CAAC,CAAC,EAAE;cAEdjC,OAAO,CAACW,IAAI,CAAE+B,CAAE,CAAC;cACjB1C,OAAO,CAACW,IAAI,CAAEgC,CAAE,CAAC;cACjB3C,OAAO,CAACW,IAAI,CAAEiC,CAAE,CAAC;cAEjB5C,OAAO,CAACW,IAAI,CAAEgC,CAAE,CAAC;cACjB3C,OAAO,CAACW,IAAI,CAAEkC,CAAE,CAAC;cACjB7C,OAAO,CAACW,IAAI,CAAEiC,CAAE,CAAC;YAElB,CAAC,MAAM;cAEN5C,OAAO,CAACW,IAAI,CAAE+B,CAAE,CAAC;cACjB1C,OAAO,CAACW,IAAI,CAAEiC,CAAE,CAAC;cACjB5C,OAAO,CAACW,IAAI,CAAEgC,CAAE,CAAC;cAEjB3C,OAAO,CAACW,IAAI,CAAEgC,CAAE,CAAC;cACjB3C,OAAO,CAACW,IAAI,CAAEiC,CAAE,CAAC;cACjB5C,OAAO,CAACW,IAAI,CAAEkC,CAAE,CAAC;YAElB;UAED;QAED;QAEA,KAAM,IAAIhB,CAAC,GAAG,CAAC,EAAGA,CAAC,GAAGvD,cAAc,EAAGuD,CAAC,EAAG,EAAE;UAE5C,IAAIa,CAAC,GAAG5B,YAAY,GAAGwB,aAAa,GAAGT,CAAC;UACxC,IAAIc,CAAC,GAAG7B,YAAY,GAAGwB,aAAa,GAAGT,CAAC,GAAG,CAAC;UAC5C,IAAIe,CAAC,GAAG9B,YAAY,GAAGb,UAAU;UAEjC,IAAI,CAACoC,KAAK,CAACJ,CAAC,CAAC,EAAE;YAEdjC,OAAO,CAACW,IAAI,CAAE+B,CAAE,CAAC;YACjB1C,OAAO,CAACW,IAAI,CAAEgC,CAAE,CAAC;YACjB3C,OAAO,CAACW,IAAI,CAAEiC,CAAE,CAAC;UAElB,CAAC,MAAM;YAEN5C,OAAO,CAACW,IAAI,CAAE+B,CAAE,CAAC;YACjB1C,OAAO,CAACW,IAAI,CAAEiC,CAAE,CAAC;YACjB5C,OAAO,CAACW,IAAI,CAAEgC,CAAE,CAAC;UAElB;QAED;MAED;IAED;;IAGA;IACA;;IAEA,SAASvC,OAAOA,CAAA,EAAE;MAEjB;MACA,IAAIsC,CAAC,GAAGzC,UAAU,CAAC;MACnB,IAAI0C,CAAC,GAAG1C,UAAU,GAAGC,gBAAgB,CAAC;MACtC,IAAI0C,CAAC,GAAG3C,UAAU,GAAGC,gBAAgB,GAAG,CAAC;MACzC,IAAI2C,CAAC,GAAG5C,UAAU,GAAGC,gBAAgB,GAAG,CAAC;MAEzCF,OAAO,CAACW,IAAI,CAAE+B,CAAE,CAAC;MACjB1C,OAAO,CAACW,IAAI,CAAEgC,CAAE,CAAC;MACjB3C,OAAO,CAACW,IAAI,CAAEiC,CAAE,CAAC;MACjB5C,OAAO,CAACW,IAAI,CAAE+B,CAAE,CAAC;MACjB1C,OAAO,CAACW,IAAI,CAAEiC,CAAE,CAAC;MACjB5C,OAAO,CAACW,IAAI,CAAEkC,CAAE,CAAC;;MAEjB;MACAH,CAAC,GAAGzC,UAAU,GAAGC,gBAAgB,GAAG,CAAC,CAAC;MACtCyC,CAAC,GAAG1C,UAAU,GAAGC,gBAAgB,GAAG,CAAC,CAAC;MACtC0C,CAAC,GAAG3C,UAAU,GAAGC,gBAAgB,GAAG,CAAC;MACrC2C,CAAC,GAAG5C,UAAU,GAAGC,gBAAgB,GAAG,CAAC;MAErCF,OAAO,CAACW,IAAI,CAAE+B,CAAE,CAAC;MACjB1C,OAAO,CAACW,IAAI,CAAEiC,CAAE,CAAC;MACjB5C,OAAO,CAACW,IAAI,CAAEgC,CAAE,CAAC;MACjB3C,OAAO,CAACW,IAAI,CAAE+B,CAAE,CAAC;MACjB1C,OAAO,CAACW,IAAI,CAAEkC,CAAE,CAAC;MACjB7C,OAAO,CAACW,IAAI,CAAEiC,CAAE,CAAC;;MAEjB;MACAF,CAAC,GAAG,CAAC;MACLC,CAAC,GAAGzC,gBAAgB;MACpB0C,CAAC,GAAG1C,gBAAgB,GAAG,CAAC;MACxB2C,CAAC,GAAG3C,gBAAgB,GAAG,CAAC;MAExBF,OAAO,CAACW,IAAI,CAAE+B,CAAE,CAAC;MACjB1C,OAAO,CAACW,IAAI,CAAEiC,CAAE,CAAC;MACjB5C,OAAO,CAACW,IAAI,CAAEgC,CAAE,CAAC;MACjB3C,OAAO,CAACW,IAAI,CAAEgC,CAAE,CAAC;MACjB3C,OAAO,CAACW,IAAI,CAAEiC,CAAE,CAAC;MACjB5C,OAAO,CAACW,IAAI,CAAEkC,CAAE,CAAC;;MAEjB;MACAH,CAAC,GAAGxC,gBAAgB,GAAG,CAAC;MACxByC,CAAC,GAAGzC,gBAAgB,GAAG,CAAC;MACxB0C,CAAC,GAAG1C,gBAAgB,GAAG,CAAC;MACxB2C,CAAC,GAAG3C,gBAAgB,GAAG,CAAC;MAExBF,OAAO,CAACW,IAAI,CAAE+B,CAAE,CAAC;MACjB1C,OAAO,CAACW,IAAI,CAAEiC,CAAE,CAAC;MACjB5C,OAAO,CAACW,IAAI,CAAEgC,CAAE,CAAC;MACjB3C,OAAO,CAACW,IAAI,CAAEgC,CAAE,CAAC;MACjB3C,OAAO,CAACW,IAAI,CAAEiC,CAAE,CAAC;MACjB5C,OAAO,CAACW,IAAI,CAAEkC,CAAE,CAAC;;MAEjB;MACAH,CAAC,GAAGpE,cAAc;MAClBqE,CAAC,GAAGrE,cAAc,GAAG4B,gBAAgB,GAAG,CAAC;MACzC0C,CAAC,GAAGtE,cAAc,GAAG4B,gBAAgB,GAAG,CAAC;MACzC2C,CAAC,GAAGvE,cAAc,GAAG4B,gBAAgB,GAAG,CAAC;MAEzCF,OAAO,CAACW,IAAI,CAAE+B,CAAE,CAAC;MACjB1C,OAAO,CAACW,IAAI,CAAEgC,CAAE,CAAC;MACjB3C,OAAO,CAACW,IAAI,CAAEiC,CAAE,CAAC;MACjB5C,OAAO,CAACW,IAAI,CAAEgC,CAAE,CAAC;MACjB3C,OAAO,CAACW,IAAI,CAAEkC,CAAE,CAAC;MACjB7C,OAAO,CAACW,IAAI,CAAEiC,CAAE,CAAC;;MAEjB;MACAF,CAAC,GAAGpE,cAAc,GAAG4B,gBAAgB;MACrCyC,CAAC,GAAGrE,cAAc,GAAG4B,gBAAgB,GAAG,CAAC;MACzC0C,CAAC,GAAGtE,cAAc,GAAG4B,gBAAgB,GAAG,CAAC;MACzC2C,CAAC,GAAGvE,cAAc,GAAG4B,gBAAgB,GAAG,CAAC;MAEzCF,OAAO,CAACW,IAAI,CAAE+B,CAAE,CAAC;MACjB1C,OAAO,CAACW,IAAI,CAAEiC,CAAE,CAAC;MACjB5C,OAAO,CAACW,IAAI,CAAEgC,CAAE,CAAC;MACjB3C,OAAO,CAACW,IAAI,CAAEgC,CAAE,CAAC;MACjB3C,OAAO,CAACW,IAAI,CAAEiC,CAAE,CAAC;MACjB5C,OAAO,CAACW,IAAI,CAAEkC,CAAE,CAAC;IAElB;;IAGA;;IAEA,SAASvC,aAAaA,CAAA,EAAE;MAEvB,KAAM,IAAI2B,CAAC,GAAG,CAAC,EAAGA,CAAC,GAAG,CAAC,EAAGA,CAAC,EAAG,EAAE;QAE/B,IAAIa,OAAO,GAAGb,CAAC,GAAG/B,gBAAgB;QAClC,IAAI6C,UAAU,GAAG,CAAC,GAAG7C,gBAAgB,GAAG4C,OAAO;QAC/C,IAAIE,SAAS,GAAGf,CAAC,GAAG,CAAC,KAAK,CAAC;QAC3B,KAAM,IAAIJ,CAAC,GAAG,CAAC,EAAGA,CAAC,GAAGvD,cAAc,EAAGuD,CAAC,EAAG,EAAE;UAE5C,IAAIY,EAAE,GAAGZ,CAAC,GAAG,CAAC;UACd,IAAIa,CAAC,GAAGI,OAAO,GAAGjB,CAAC;UACnB,IAAIc,CAAC,GAAGG,OAAO,GAAGL,EAAE;UACpB,IAAIG,CAAC,GAAGG,UAAU,GAAGlB,CAAC;UACtB,IAAIgB,CAAC,GAAGE,UAAU,GAAGN,EAAE;UAEvB,IAAI,CAACO,SAAS,EAAE;YAEfhD,OAAO,CAACW,IAAI,CAAE+B,CAAE,CAAC;YACjB1C,OAAO,CAACW,IAAI,CAAEgC,CAAE,CAAC;YACjB3C,OAAO,CAACW,IAAI,CAAEiC,CAAE,CAAC;YACjB5C,OAAO,CAACW,IAAI,CAAEgC,CAAE,CAAC;YACjB3C,OAAO,CAACW,IAAI,CAAEkC,CAAE,CAAC;YACjB7C,OAAO,CAACW,IAAI,CAAEiC,CAAE,CAAC;UAElB,CAAC,MAAM;YAEN5C,OAAO,CAACW,IAAI,CAAE+B,CAAE,CAAC;YACjB1C,OAAO,CAACW,IAAI,CAAEiC,CAAE,CAAC;YACjB5C,OAAO,CAACW,IAAI,CAAEgC,CAAE,CAAC;YACjB3C,OAAO,CAACW,IAAI,CAAEgC,CAAE,CAAC;YACjB3C,OAAO,CAACW,IAAI,CAAEiC,CAAE,CAAC;YACjB5C,OAAO,CAACW,IAAI,CAAEkC,CAAE,CAAC;UAElB;QAED;MAED;IAED;IAEA,SAASrC,YAAYA,CAAA,EAAE;MAEtB,IAAIyC,OAAO,GAAG,CAAE,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,CAAE;MAC/B,IAAIC,KAAK,GAAK,CAAE,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,CAAE;MAE/B,KAAM,IAAIjB,CAAC,GAAG,CAAC,EAAGA,CAAC,GAAG,CAAC,EAAGA,CAAC,EAAG,EAAE;QAE/B,IAAIkB,MAAM,GAAGjD,gBAAgB,GAAG+C,OAAO,CAAEhB,CAAC,CAAE;QAC5C,IAAImB,IAAI,GAAKlD,gBAAgB,GAAGgD,KAAK,CAAEjB,CAAC,CAAE;QAE1C,IAAIe,SAAS,GAAG,CAAC,IAAIf,CAAC;QAEtB,KAAM,IAAIJ,CAAC,GAAG,CAAC,EAAGA,CAAC,GAAGvD,cAAc,EAAGuD,CAAC,EAAG,EAAE;UAE5C,IAAIwB,IAAI,GAAIxB,CAAC,GAAG1C,GAAG;UACnB,IAAImE,KAAK,GAAG,CAACzB,CAAC,GAAC,CAAC,IAAI1C,GAAG;UAEvB,IAAIuD,CAAC,GAAGS,MAAM,GAAGE,IAAI;UACrB,IAAIV,CAAC,GAAGQ,MAAM,GAAGG,KAAK;UACtB,IAAIV,CAAC,GAAGQ,IAAI,GAAGC,IAAI;UACnB,IAAIR,CAAC,GAAGO,IAAI,GAAGE,KAAK;UAEpB,IAAIN,SAAS,EAAE;YAEdhD,OAAO,CAACW,IAAI,CAAE+B,CAAE,CAAC;YACjB1C,OAAO,CAACW,IAAI,CAAEiC,CAAE,CAAC;YACjB5C,OAAO,CAACW,IAAI,CAAEgC,CAAE,CAAC;YACjB3C,OAAO,CAACW,IAAI,CAAEgC,CAAE,CAAC;YACjB3C,OAAO,CAACW,IAAI,CAAEiC,CAAE,CAAC;YACjB5C,OAAO,CAACW,IAAI,CAAEkC,CAAE,CAAC;UAElB,CAAC,MAAM;YAEN7C,OAAO,CAACW,IAAI,CAAE+B,CAAE,CAAC;YACjB1C,OAAO,CAACW,IAAI,CAAEgC,CAAE,CAAC;YACjB3C,OAAO,CAACW,IAAI,CAAEiC,CAAE,CAAC;YACjB5C,OAAO,CAACW,IAAI,CAAEgC,CAAE,CAAC;YACjB3C,OAAO,CAACW,IAAI,CAAEkC,CAAE,CAAC;YACjB7C,OAAO,CAACW,IAAI,CAAEiC,CAAE,CAAC;UAElB;QAED;MAED;IAED;IAEA,SAASrC,YAAYA,CAAA,EAAE;MAEtB,IAAIgD,GAAG,GAAGjF,cAAc,GAAG,CAAC;MAE5B,IAAI2E,OAAO,GAAG,CAAE,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,CAAE;MAC/B,IAAIC,KAAK,GAAK,CAAE,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,CAAE;MAC/B,IAAIF,SAAS,GAAG,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;MAEzB,KAAM,IAAIf,CAAC,GAAG,CAAC,EAAGA,CAAC,GAAG,CAAC,EAAGA,CAAC,EAAG,EAAE;QAE/B,IAAIkB,MAAM,GAAGF,OAAO,CAAChB,CAAC,CAAC,GAAG/B,gBAAgB;QAC1C,IAAIkD,IAAI,GAAGF,KAAK,CAACjB,CAAC,CAAC,GAAG/B,gBAAgB;QAGtC,KAAM,IAAI2B,CAAC,GAAG,CAAC,EAAGA,CAAC,IAAI0B,GAAG,EAAG1B,CAAC,EAAG,EAAE;UAElC;;UAEA,IAAIa,CAAC,GAAGS,MAAM,GAAG7E,cAAc,GAAGuD,CAAC,GAAG1C,GAAG;UACzC,IAAIwD,CAAC,GAAGQ,MAAM,IAAItB,CAAC,IAAI0B,GAAG,GAAGjF,cAAc,GAAG,CAACuD,CAAC,GAAG,CAAC,IAAI1C,GAAG,GAAGe,gBAAgB,GAAG,CAAC,CAAC;UAEnF,IAAI0C,CAAC,GAAGQ,IAAI,GAAG9E,cAAc,GAAGuD,CAAC,GAAG1C,GAAG;UACvC,IAAI0D,CAAC,GAAGO,IAAI,IAAIvB,CAAC,IAAI0B,GAAG,GAAGjF,cAAc,GAAG,CAACuD,CAAC,GAAG,CAAC,IAAI1C,GAAG,GAAGe,gBAAgB,GAAG,CAAC,CAAC;UAEjF,IAAI,CAAC8C,SAAS,CAACf,CAAC,CAAC,EAAE;YAElBjC,OAAO,CAACW,IAAI,CAAE+B,CAAE,CAAC;YACjB1C,OAAO,CAACW,IAAI,CAAEgC,CAAE,CAAC;YACjB3C,OAAO,CAACW,IAAI,CAAEiC,CAAE,CAAC;YACjB5C,OAAO,CAACW,IAAI,CAAEgC,CAAE,CAAC;YACjB3C,OAAO,CAACW,IAAI,CAAEkC,CAAE,CAAC;YACjB7C,OAAO,CAACW,IAAI,CAAEiC,CAAE,CAAC;UAElB,CAAC,MACI;YAEJ5C,OAAO,CAACW,IAAI,CAAE+B,CAAE,CAAC;YACjB1C,OAAO,CAACW,IAAI,CAAEiC,CAAE,CAAC;YACjB5C,OAAO,CAACW,IAAI,CAAEgC,CAAE,CAAC;YACjB3C,OAAO,CAACW,IAAI,CAAEgC,CAAE,CAAC;YACjB3C,OAAO,CAACW,IAAI,CAAEiC,CAAE,CAAC;YACjB5C,OAAO,CAACW,IAAI,CAAEkC,CAAE,CAAC;UAElB;QAED;MAED;IAED;;IAGA;;IAEA,IAAIW,KAAK,GAAG,CAAC;IAEb,KAAM,IAAIvB,CAAC,GAAG,CAAC,EAAGA,CAAC,GAAGnC,UAAU,CAACoC,MAAM,EAAGD,CAAC,EAAG,EAAE;MAE/C5C,SAAS,CAACoE,MAAM,CACfD,KAAK,EACL1D,UAAU,CAACmC,CAAC,CAAC,CAACL,CAAC,EACf9B,UAAU,CAACmC,CAAC,CAAC,CAAClB,CAAC,EACfjB,UAAU,CAACmC,CAAC,CAAC,CAACF,CACf,CAAC;MAEDvC,OAAO,CAACiE,MAAM,CACbD,KAAK,EACLzD,UAAU,CAACkC,CAAC,CAAC,CAACL,CAAC,EACf7B,UAAU,CAACkC,CAAC,CAAC,CAAClB,CAAC,EACfhB,UAAU,CAACkC,CAAC,CAAC,CAACF,CACf,CAAC;MAEDyB,KAAK,EAAE;IAER;IAEA,IAAI,CAACE,QAAQ,CAAE,IAAI1F,KAAK,CAACsB,eAAe,CAAE,IAAIqE,WAAW,CAAE3D,OAAQ,CAAC,EAAG,CAAE,CAAE,CAAC;IAE5E,IAAI,CAAC4D,YAAY,CAAE,UAAU,EAAEvE,SAAU,CAAC;IAE1C,IAAI,CAACuE,YAAY,CAAE,QAAQ,EAAEpE,OAAQ,CAAC;EAEvC,CAAC;EAEDvB,kBAAkB,CAAC4F,SAAS,GAAGC,MAAM,CAACC,MAAM,CAAE/F,KAAK,CAACO,cAAc,CAACsF,SAAU,CAAC;EAC9E5F,kBAAkB,CAAC+F,WAAW,GAAG/F,kBAAkB;EAEnD,OAAOA,kBAAkB;AAEzB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}