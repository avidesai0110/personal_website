{"ast":null,"code":"// Shapes.js\nimport*as THREE from'three';// Function to create a rounded star shape\nexport const createRoundedStar=(outerRadius,innerRadius,points,depth,smoothness)=>{const starShape=new THREE.Shape();const step=Math.PI/points;for(let i=0;i<2*points;i++){const radius=i%2===0?outerRadius:innerRadius;const angle=i*step;const x=Math.cos(angle)*radius;const y=Math.sin(angle)*radius;if(i===0){starShape.moveTo(x,y);}else{starShape.lineTo(x,y);}}starShape.closePath();const extrudeSettings={depth:depth,bevelEnabled:true,bevelThickness:smoothness,bevelSize:smoothness,bevelSegments:10};return new THREE.ExtrudeGeometry(starShape,extrudeSettings);};// Custom Rounded Box Geometry for consistent size across shapes\nexport const createRoundedBox=(width,height,depth,radius,smoothness)=>{const shape=new THREE.Shape();const halfWidth=width/2-radius;const halfHeight=height/2-radius;shape.moveTo(-halfWidth,halfHeight);shape.lineTo(halfWidth,halfHeight);shape.quadraticCurveTo(width/2,halfHeight,width/2,halfHeight-radius);shape.lineTo(width/2,-halfHeight);shape.quadraticCurveTo(width/2,-height/2,halfWidth,-height/2);shape.lineTo(-halfWidth,-height/2);shape.quadraticCurveTo(-width/2,-height/2,-width/2,-halfHeight);shape.lineTo(-width/2,halfHeight-radius);shape.quadraticCurveTo(-width/2,halfHeight,-halfWidth,halfHeight);const extrudeSettings={depth:depth,bevelEnabled:true,bevelSegments:smoothness,steps:2,bevelSize:radius,bevelThickness:radius};return new THREE.ExtrudeGeometry(shape,extrudeSettings);};// Export geometries\nexport const geometries=[new THREE.SphereGeometry(45,32,32),// Sphere\nnew THREE.CylinderGeometry(40,40,80,32),// Cylinder replacing the cone\nnew THREE.TorusGeometry(35,15,16,100),// Torus\ncreateRoundedBox(70,70,70,8,16),// Rounded Box\nnew THREE.TorusKnotGeometry(30,10,100,16),// Torus Knot for a unique twist\ncreateRoundedStar(60,30,5,40,3)// Custom Rounded Star\n];// Export colors\nexport const colors=[0xffa500,// Orange\n0xbb66ff,// Purple\n0x6699ff,// Light Blue\n0x87cefa,// Sky Blue\n0x90ee90,// Light Green\n0xffff66// Yellow\n];","map":{"version":3,"names":["THREE","createRoundedStar","outerRadius","innerRadius","points","depth","smoothness","starShape","Shape","step","Math","PI","i","radius","angle","x","cos","y","sin","moveTo","lineTo","closePath","extrudeSettings","bevelEnabled","bevelThickness","bevelSize","bevelSegments","ExtrudeGeometry","createRoundedBox","width","height","shape","halfWidth","halfHeight","quadraticCurveTo","steps","geometries","SphereGeometry","CylinderGeometry","TorusGeometry","TorusKnotGeometry","colors"],"sources":["/Users/avi/Desktop/personal_website/src/Shapes.js"],"sourcesContent":["// Shapes.js\nimport * as THREE from 'three';\n\n// Function to create a rounded star shape\nexport const createRoundedStar = (outerRadius, innerRadius, points, depth, smoothness) => {\n  const starShape = new THREE.Shape();\n  const step = Math.PI / points;\n  for (let i = 0; i < 2 * points; i++) {\n    const radius = i % 2 === 0 ? outerRadius : innerRadius;\n    const angle = i * step;\n    const x = Math.cos(angle) * radius;\n    const y = Math.sin(angle) * radius;\n    if (i === 0) {\n      starShape.moveTo(x, y);\n    } else {\n      starShape.lineTo(x, y);\n    }\n  }\n  starShape.closePath();\n\n  const extrudeSettings = {\n    depth: depth,\n    bevelEnabled: true,\n    bevelThickness: smoothness,\n    bevelSize: smoothness,\n    bevelSegments: 10,\n  };\n\n  return new THREE.ExtrudeGeometry(starShape, extrudeSettings);\n};\n\n// Custom Rounded Box Geometry for consistent size across shapes\nexport const createRoundedBox = (width, height, depth, radius, smoothness) => {\n  const shape = new THREE.Shape();\n  const halfWidth = width / 2 - radius;\n  const halfHeight = height / 2 - radius;\n\n  shape.moveTo(-halfWidth, halfHeight);\n  shape.lineTo(halfWidth, halfHeight);\n  shape.quadraticCurveTo(width / 2, halfHeight, width / 2, halfHeight - radius);\n  shape.lineTo(width / 2, -halfHeight);\n  shape.quadraticCurveTo(width / 2, -height / 2, halfWidth, -height / 2);\n  shape.lineTo(-halfWidth, -height / 2);\n  shape.quadraticCurveTo(-width / 2, -height / 2, -width / 2, -halfHeight);\n  shape.lineTo(-width / 2, halfHeight - radius);\n  shape.quadraticCurveTo(-width / 2, halfHeight, -halfWidth, halfHeight);\n\n  const extrudeSettings = {\n    depth: depth,\n    bevelEnabled: true,\n    bevelSegments: smoothness,\n    steps: 2,\n    bevelSize: radius,\n    bevelThickness: radius,\n  };\n\n  return new THREE.ExtrudeGeometry(shape, extrudeSettings);\n};\n\n// Export geometries\nexport const geometries = [\n  new THREE.SphereGeometry(45, 32, 32),          // Sphere\n  new THREE.CylinderGeometry(40, 40, 80, 32),    // Cylinder replacing the cone\n  new THREE.TorusGeometry(35, 15, 16, 100),      // Torus\n  createRoundedBox(70, 70, 70, 8, 16),           // Rounded Box\n  new THREE.TorusKnotGeometry(30, 10, 100, 16),  // Torus Knot for a unique twist\n  createRoundedStar(60, 30, 5, 40, 3),           // Custom Rounded Star\n];\n\n// Export colors\nexport const colors = [\n  0xffa500,   // Orange\n  0xbb66ff,   // Purple\n  0x6699ff,   // Light Blue\n  0x87cefa,   // Sky Blue\n  0x90ee90,   // Light Green\n  0xffff66,   // Yellow\n];\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}