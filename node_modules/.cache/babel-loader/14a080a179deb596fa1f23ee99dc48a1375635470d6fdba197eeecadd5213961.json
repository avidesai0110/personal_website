{"ast":null,"code":"var _jsxFileName = \"/Users/avi/Desktop/mywebsite/personal-website/src/components/Particles.js\",\n  _s = $RefreshSig$();\n// src/components/Particles.js\nimport React, { useEffect, useRef } from 'react';\nimport './Particles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Particles = () => {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n    const particlesArray = [];\n    const mouse = {\n      x: null,\n      y: null\n    };\n\n    // Mouse Event Listener\n    window.addEventListener('mousemove', event => {\n      mouse.x = event.x;\n      mouse.y = event.y;\n    });\n    class Particle {\n      constructor(x, y, layer) {\n        this.x = x;\n        this.y = y;\n        this.layer = layer; // Assign each particle a specific layer (0-4)\n        this.size = Math.random() * 20 + 20; // Larger sizes for better visibility\n        this.baseX = x;\n        this.baseY = y;\n        this.velocityX = Math.random() * 1.5 - 0.75; // Random X velocity\n        this.velocityY = Math.random() * 1.5 - 0.75; // Random Y velocity\n        this.color = `hsl(${Math.random() * 360}, 100%, 60%)`; // Brighter colors for vivid effect\n      }\n      draw() {\n        // Create a radial gradient to simulate a 3D effect\n        const gradient = context.createRadialGradient(this.x - this.size / 4, this.y - this.size / 4, this.size / 5, this.x, this.y, this.size);\n        gradient.addColorStop(0, 'white');\n        gradient.addColorStop(0.3, this.color);\n        gradient.addColorStop(1, 'black');\n        context.beginPath();\n        context.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n        context.fillStyle = gradient;\n        context.fill();\n        context.closePath();\n      }\n      update(particles) {\n        // Attraction to mouse with orbital behavior\n        if (mouse.x !== null && mouse.y !== null) {\n          const dx = mouse.x - this.x;\n          const dy = mouse.y - this.y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n          const maxDistance = 100; // Set radius around the cursor for orbit\n          const force = 0.05; // Strength of attraction\n          const angle = Math.atan2(dy, dx); // Angle towards the cursor\n\n          // Calculate acceleration towards the cursor\n          let accelerationX = dx * force / distance;\n          let accelerationY = dy * force / distance;\n\n          // If close to the mouse, move in an orbit-like fashion\n          if (distance < maxDistance) {\n            // Rotate around the cursor\n            this.velocityX += -Math.sin(angle) * 0.5;\n            this.velocityY += Math.cos(angle) * 0.5;\n          } else {\n            // Move towards the cursor smoothly\n            this.velocityX += accelerationX;\n            this.velocityY += accelerationY;\n          }\n        }\n\n        // Update position\n        this.x += this.velocityX;\n        this.y += this.velocityY;\n\n        // Slow down slightly to keep the movement smooth\n        this.velocityX *= 0.95;\n        this.velocityY *= 0.95;\n\n        // Ensure particles stay within canvas bounds\n        if (this.x + this.size > canvas.width || this.x - this.size < 0) {\n          this.velocityX = -this.velocityX;\n        }\n        if (this.y + this.size > canvas.height || this.y - this.size < 0) {\n          this.velocityY = -this.velocityY;\n        }\n\n        // Collision detection between particles of the same layer\n        particles.forEach(particle => {\n          if (this === particle || this.layer !== particle.layer) return; // Skip self or particles of different layers\n\n          const dx = particle.x - this.x;\n          const dy = particle.y - this.y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n          if (distance < this.size + particle.size) {\n            // Collision response: particles push away from each other\n            const overlap = this.size + particle.size - distance;\n            const angle = Math.atan2(dy, dx);\n            this.x -= Math.cos(angle) * overlap / 2;\n            this.y -= Math.sin(angle) * overlap / 2;\n            particle.x += Math.cos(angle) * overlap / 2;\n            particle.y += Math.sin(angle) * overlap / 2;\n\n            // Adjust speed on collision\n            this.velocityX = -this.velocityX;\n            this.velocityY = -this.velocityY;\n            particle.velocityX = -particle.velocityX;\n            particle.velocityY = -particle.velocityY;\n          }\n        });\n        this.draw();\n      }\n    }\n\n    // Initialize Particles with 5 Layers\n    function init() {\n      particlesArray.length = 0;\n      const numParticles = 75; // Number of particles\n      const numLayers = 5; // Number of layers\n\n      for (let i = 0; i < numParticles; i++) {\n        const x = Math.random() * canvas.width;\n        const y = Math.random() * canvas.height;\n        const layer = Math.floor(Math.random() * numLayers); // Random layer between 0 and 4\n        particlesArray.push(new Particle(x, y, layer));\n      }\n    }\n\n    // Animation Loop\n    function animate() {\n      context.clearRect(0, 0, canvas.width, canvas.height);\n      particlesArray.forEach(particle => particle.update(particlesArray));\n      requestAnimationFrame(animate);\n    }\n    init();\n    animate();\n\n    // Resize canvas and re-initialize particles on window resize\n    window.addEventListener('resize', () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n      init();\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    className: \"particles-canvas\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 5\n  }, this);\n};\n_s(Particles, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = Particles;\nexport default Particles;\nvar _c;\n$RefreshReg$(_c, \"Particles\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","Particles","_s","canvasRef","canvas","current","context","getContext","width","window","innerWidth","height","innerHeight","particlesArray","mouse","x","y","addEventListener","event","Particle","constructor","layer","size","Math","random","baseX","baseY","velocityX","velocityY","color","draw","gradient","createRadialGradient","addColorStop","beginPath","arc","PI","fillStyle","fill","closePath","update","particles","dx","dy","distance","sqrt","maxDistance","force","angle","atan2","accelerationX","accelerationY","sin","cos","forEach","particle","overlap","init","length","numParticles","numLayers","i","floor","push","animate","clearRect","requestAnimationFrame","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/avi/Desktop/mywebsite/personal-website/src/components/Particles.js"],"sourcesContent":["// src/components/Particles.js\nimport React, { useEffect, useRef } from 'react';\nimport './Particles.css';\n\nconst Particles = () => {\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n\n    const particlesArray = [];\n    const mouse = {\n      x: null,\n      y: null,\n    };\n\n    // Mouse Event Listener\n    window.addEventListener('mousemove', (event) => {\n      mouse.x = event.x;\n      mouse.y = event.y;\n    });\n\n    class Particle {\n      constructor(x, y, layer) {\n        this.x = x;\n        this.y = y;\n        this.layer = layer; // Assign each particle a specific layer (0-4)\n        this.size = Math.random() * 20 + 20; // Larger sizes for better visibility\n        this.baseX = x;\n        this.baseY = y;\n        this.velocityX = Math.random() * 1.5 - 0.75; // Random X velocity\n        this.velocityY = Math.random() * 1.5 - 0.75; // Random Y velocity\n        this.color = `hsl(${Math.random() * 360}, 100%, 60%)`; // Brighter colors for vivid effect\n      }\n\n      draw() {\n        // Create a radial gradient to simulate a 3D effect\n        const gradient = context.createRadialGradient(\n          this.x - this.size / 4,\n          this.y - this.size / 4,\n          this.size / 5,\n          this.x,\n          this.y,\n          this.size\n        );\n        gradient.addColorStop(0, 'white');\n        gradient.addColorStop(0.3, this.color);\n        gradient.addColorStop(1, 'black');\n\n        context.beginPath();\n        context.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n        context.fillStyle = gradient;\n        context.fill();\n        context.closePath();\n      }\n\n      update(particles) {\n        // Attraction to mouse with orbital behavior\n        if (mouse.x !== null && mouse.y !== null) {\n          const dx = mouse.x - this.x;\n          const dy = mouse.y - this.y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n          const maxDistance = 100; // Set radius around the cursor for orbit\n          const force = 0.05; // Strength of attraction\n          const angle = Math.atan2(dy, dx); // Angle towards the cursor\n\n          // Calculate acceleration towards the cursor\n          let accelerationX = dx * force / distance;\n          let accelerationY = dy * force / distance;\n\n          // If close to the mouse, move in an orbit-like fashion\n          if (distance < maxDistance) {\n            // Rotate around the cursor\n            this.velocityX += -Math.sin(angle) * 0.5;\n            this.velocityY += Math.cos(angle) * 0.5;\n          } else {\n            // Move towards the cursor smoothly\n            this.velocityX += accelerationX;\n            this.velocityY += accelerationY;\n          }\n        }\n\n        // Update position\n        this.x += this.velocityX;\n        this.y += this.velocityY;\n\n        // Slow down slightly to keep the movement smooth\n        this.velocityX *= 0.95;\n        this.velocityY *= 0.95;\n\n        // Ensure particles stay within canvas bounds\n        if (this.x + this.size > canvas.width || this.x - this.size < 0) {\n          this.velocityX = -this.velocityX;\n        }\n        if (this.y + this.size > canvas.height || this.y - this.size < 0) {\n          this.velocityY = -this.velocityY;\n        }\n\n        // Collision detection between particles of the same layer\n        particles.forEach(particle => {\n          if (this === particle || this.layer !== particle.layer) return; // Skip self or particles of different layers\n\n          const dx = particle.x - this.x;\n          const dy = particle.y - this.y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n\n          if (distance < this.size + particle.size) {\n            // Collision response: particles push away from each other\n            const overlap = (this.size + particle.size) - distance;\n            const angle = Math.atan2(dy, dx);\n\n            this.x -= Math.cos(angle) * overlap / 2;\n            this.y -= Math.sin(angle) * overlap / 2;\n\n            particle.x += Math.cos(angle) * overlap / 2;\n            particle.y += Math.sin(angle) * overlap / 2;\n\n            // Adjust speed on collision\n            this.velocityX = -this.velocityX;\n            this.velocityY = -this.velocityY;\n            particle.velocityX = -particle.velocityX;\n            particle.velocityY = -particle.velocityY;\n          }\n        });\n\n        this.draw();\n      }\n    }\n\n    // Initialize Particles with 5 Layers\n    function init() {\n      particlesArray.length = 0;\n      const numParticles = 75; // Number of particles\n      const numLayers = 5; // Number of layers\n\n      for (let i = 0; i < numParticles; i++) {\n        const x = Math.random() * canvas.width;\n        const y = Math.random() * canvas.height;\n        const layer = Math.floor(Math.random() * numLayers); // Random layer between 0 and 4\n        particlesArray.push(new Particle(x, y, layer));\n      }\n    }\n\n    // Animation Loop\n    function animate() {\n      context.clearRect(0, 0, canvas.width, canvas.height);\n      particlesArray.forEach(particle => particle.update(particlesArray));\n      requestAnimationFrame(animate);\n    }\n\n    init();\n    animate();\n\n    // Resize canvas and re-initialize particles on window resize\n    window.addEventListener('resize', () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n      init();\n    });\n  }, []);\n\n  return (\n    <canvas ref={canvasRef} className=\"particles-canvas\"></canvas>\n  );\n};\n\nexport default Particles;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}